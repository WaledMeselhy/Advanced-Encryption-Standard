#include <termios.h>
#include "stdio.h"
//#include "process.h"
#include "strings.h"
#include "string.h"
#include "time.h"
#include <stdlib.h>
#include "omp.h"


unsigned char LookUpOne[][4]={
{0xC6,0x63,0x63,0xA5},
{0xF8,0x7C,0x7C,0x84},
{0xEE,0x77,0x77,0x99},
{0xF6,0x7B,0x7B,0x8D},
{0xFF,0xF2,0xF2,0xD},
{0xD6,0x6B,0x6B,0xBD},
{0xDE,0x6F,0x6F,0xB1},
{0x91,0xC5,0xC5,0x54},
{0x60,0x30,0x30,0x50},
{0x2,0x1,0x1,0x3},
{0xCE,0x67,0x67,0xA9},
{0x56,0x2B,0x2B,0x7D},
{0xE7,0xFE,0xFE,0x19},
{0xB5,0xD7,0xD7,0x62},
{0x4D,0xAB,0xAB,0xE6},
{0xEC,0x76,0x76,0x9A},
{0x8F,0xCA,0xCA,0x45},
{0x1F,0x82,0x82,0x9D},
{0x89,0xC9,0xC9,0x40},
{0xFA,0x7D,0x7D,0x87},
{0xEF,0xFA,0xFA,0x15},
{0xB2,0x59,0x59,0xEB},
{0x8E,0x47,0x47,0xC9},
{0xFB,0xF0,0xF0,0xB},
{0x41,0xAD,0xAD,0xEC},
{0xB3,0xD4,0xD4,0x67},
{0x5F,0xA2,0xA2,0xFD},
{0x45,0xAF,0xAF,0xEA},
{0x23,0x9C,0x9C,0xBF},
{0x53,0xA4,0xA4,0xF7},
{0xE4,0x72,0x72,0x96},
{0x9B,0xC0,0xC0,0x5B},
{0x75,0xB7,0xB7,0xC2},
{0xE1,0xFD,0xFD,0x1C},
{0x3D,0x93,0x93,0xAE},
{0x4C,0x26,0x26,0x6A},
{0x6C,0x36,0x36,0x5A},
{0x7E,0x3F,0x3F,0x41},
{0xF5,0xF7,0xF7,0x2},
{0x83,0xCC,0xCC,0x4F},
{0x68,0x34,0x34,0x5C},
{0x51,0xA5,0xA5,0xF4},
{0xD1,0xE5,0xE5,0x34},
{0xF9,0xF1,0xF1,0x8},
{0xE2,0x71,0x71,0x93},
{0xAB,0xD8,0xD8,0x73},
{0x62,0x31,0x31,0x53},
{0x2A,0x15,0x15,0x3F},
{0x8,0x4,0x4,0xC},
{0x95,0xC7,0xC7,0x52},
{0x46,0x23,0x23,0x65},
{0x9D,0xC3,0xC3,0x5E},
{0x30,0x18,0x18,0x28},
{0x37,0x96,0x96,0xA1},
{0xA,0x5,0x5,0xF},
{0x2F,0x9A,0x9A,0xB5},
{0xE,0x7,0x7,0x9},
{0x24,0x12,0x12,0x36},
{0x1B,0x80,0x80,0x9B},
{0xDF,0xE2,0xE2,0x3D},
{0xCD,0xEB,0xEB,0x26},
{0x4E,0x27,0x27,0x69},
{0x7F,0xB2,0xB2,0xCD},
{0xEA,0x75,0x75,0x9F},
{0x12,0x9,0x9,0x1B},
{0x1D,0x83,0x83,0x9E},
{0x58,0x2C,0x2C,0x74},
{0x34,0x1A,0x1A,0x2E},
{0x36,0x1B,0x1B,0x2D},
{0xDC,0x6E,0x6E,0xB2},
{0xB4,0x5A,0x5A,0xEE},
{0x5B,0xA0,0xA0,0xFB},
{0xA4,0x52,0x52,0xF6},
{0x76,0x3B,0x3B,0x4D},
{0xB7,0xD6,0xD6,0x61},
{0x7D,0xB3,0xB3,0xCE},
{0x52,0x29,0x29,0x7B},
{0xDD,0xE3,0xE3,0x3E},
{0x5E,0x2F,0x2F,0x71},
{0x13,0x84,0x84,0x97},
{0xA6,0x53,0x53,0xF5},
{0xB9,0xD1,0xD1,0x68},
{0x0,0x0,0x0,0x0},
{0xC1,0xED,0xED,0x2C},
{0x40,0x20,0x20,0x60},
{0xE3,0xFC,0xFC,0x1F},
{0x79,0xB1,0xB1,0xC8},
{0xB6,0x5B,0x5B,0xED},
{0xD4,0x6A,0x6A,0xBE},
{0x8D,0xCB,0xCB,0x46},
{0x67,0xBE,0xBE,0xD9},
{0x72,0x39,0x39,0x4B},
{0x94,0x4A,0x4A,0xDE},
{0x98,0x4C,0x4C,0xD4},
{0xB0,0x58,0x58,0xE8},
{0x85,0xCF,0xCF,0x4A},
{0xBB,0xD0,0xD0,0x6B},
{0xC5,0xEF,0xEF,0x2A},
{0x4F,0xAA,0xAA,0xE5},
{0xED,0xFB,0xFB,0x16},
{0x86,0x43,0x43,0xC5},
{0x9A,0x4D,0x4D,0xD7},
{0x66,0x33,0x33,0x55},
{0x11,0x85,0x85,0x94},
{0x8A,0x45,0x45,0xCF},
{0xE9,0xF9,0xF9,0x10},
{0x4,0x2,0x2,0x6},
{0xFE,0x7F,0x7F,0x81},
{0xA0,0x50,0x50,0xF0},
{0x78,0x3C,0x3C,0x44},
{0x25,0x9F,0x9F,0xBA},
{0x4B,0xA8,0xA8,0xE3},
{0xA2,0x51,0x51,0xF3},
{0x5D,0xA3,0xA3,0xFE},
{0x80,0x40,0x40,0xC0},
{0x5,0x8F,0x8F,0x8A},
{0x3F,0x92,0x92,0xAD},
{0x21,0x9D,0x9D,0xBC},
{0x70,0x38,0x38,0x48},
{0xF1,0xF5,0xF5,0x4},
{0x63,0xBC,0xBC,0xDF},
{0x77,0xB6,0xB6,0xC1},
{0xAF,0xDA,0xDA,0x75},
{0x42,0x21,0x21,0x63},
{0x20,0x10,0x10,0x30},
{0xE5,0xFF,0xFF,0x1A},
{0xFD,0xF3,0xF3,0xE},
{0xBF,0xD2,0xD2,0x6D},
{0x81,0xCD,0xCD,0x4C},
{0x18,0xC,0xC,0x14},
{0x26,0x13,0x13,0x35},
{0xC3,0xEC,0xEC,0x2F},
{0xBE,0x5F,0x5F,0xE1},
{0x35,0x97,0x97,0xA2},
{0x88,0x44,0x44,0xCC},
{0x2E,0x17,0x17,0x39},
{0x93,0xC4,0xC4,0x57},
{0x55,0xA7,0xA7,0xF2},
{0xFC,0x7E,0x7E,0x82},
{0x7A,0x3D,0x3D,0x47},
{0xC8,0x64,0x64,0xAC},
{0xBA,0x5D,0x5D,0xE7},
{0x32,0x19,0x19,0x2B},
{0xE6,0x73,0x73,0x95},
{0xC0,0x60,0x60,0xA0},
{0x19,0x81,0x81,0x98},
{0x9E,0x4F,0x4F,0xD1},
{0xA3,0xDC,0xDC,0x7F},
{0x44,0x22,0x22,0x66},
{0x54,0x2A,0x2A,0x7E},
{0x3B,0x90,0x90,0xAB},
{0xB,0x88,0x88,0x83},
{0x8C,0x46,0x46,0xCA},
{0xC7,0xEE,0xEE,0x29},
{0x6B,0xB8,0xB8,0xD3},
{0x28,0x14,0x14,0x3C},
{0xA7,0xDE,0xDE,0x79},
{0xBC,0x5E,0x5E,0xE2},
{0x16,0xB,0xB,0x1D},
{0xAD,0xDB,0xDB,0x76},
{0xDB,0xE0,0xE0,0x3B},
{0x64,0x32,0x32,0x56},
{0x74,0x3A,0x3A,0x4E},
{0x14,0xA,0xA,0x1E},
{0x92,0x49,0x49,0xDB},
{0xC,0x6,0x6,0xA},
{0x48,0x24,0x24,0x6C},
{0xB8,0x5C,0x5C,0xE4},
{0x9F,0xC2,0xC2,0x5D},
{0xBD,0xD3,0xD3,0x6E},
{0x43,0xAC,0xAC,0xEF},
{0xC4,0x62,0x62,0xA6},
{0x39,0x91,0x91,0xA8},
{0x31,0x95,0x95,0xA4},
{0xD3,0xE4,0xE4,0x37},
{0xF2,0x79,0x79,0x8B},
{0xD5,0xE7,0xE7,0x32},
{0x8B,0xC8,0xC8,0x43},
{0x6E,0x37,0x37,0x59},
{0xDA,0x6D,0x6D,0xB7},
{0x1,0x8D,0x8D,0x8C},
{0xB1,0xD5,0xD5,0x64},
{0x9C,0x4E,0x4E,0xD2},
{0x49,0xA9,0xA9,0xE0},
{0xD8,0x6C,0x6C,0xB4},
{0xAC,0x56,0x56,0xFA},
{0xF3,0xF4,0xF4,0x7},
{0xCF,0xEA,0xEA,0x25},
{0xCA,0x65,0x65,0xAF},
{0xF4,0x7A,0x7A,0x8E},
{0x47,0xAE,0xAE,0xE9},
{0x10,0x8,0x8,0x18},
{0x6F,0xBA,0xBA,0xD5},
{0xF0,0x78,0x78,0x88},
{0x4A,0x25,0x25,0x6F},
{0x5C,0x2E,0x2E,0x72},
{0x38,0x1C,0x1C,0x24},
{0x57,0xA6,0xA6,0xF1},
{0x73,0xB4,0xB4,0xC7},
{0x97,0xC6,0xC6,0x51},
{0xCB,0xE8,0xE8,0x23},
{0xA1,0xDD,0xDD,0x7C},
{0xE8,0x74,0x74,0x9C},
{0x3E,0x1F,0x1F,0x21},
{0x96,0x4B,0x4B,0xDD},
{0x61,0xBD,0xBD,0xDC},
{0xD,0x8B,0x8B,0x86},
{0xF,0x8A,0x8A,0x85},
{0xE0,0x70,0x70,0x90},
{0x7C,0x3E,0x3E,0x42},
{0x71,0xB5,0xB5,0xC4},
{0xCC,0x66,0x66,0xAA},
{0x90,0x48,0x48,0xD8},
{0x6,0x3,0x3,0x5},
{0xF7,0xF6,0xF6,0x1},
{0x1C,0xE,0xE,0x12},
{0xC2,0x61,0x61,0xA3},
{0x6A,0x35,0x35,0x5F},
{0xAE,0x57,0x57,0xF9},
{0x69,0xB9,0xB9,0xD0},
{0x17,0x86,0x86,0x91},
{0x99,0xC1,0xC1,0x58},
{0x3A,0x1D,0x1D,0x27},
{0x27,0x9E,0x9E,0xB9},
{0xD9,0xE1,0xE1,0x38},
{0xEB,0xF8,0xF8,0x13},
{0x2B,0x98,0x98,0xB3},
{0x22,0x11,0x11,0x33},
{0xD2,0x69,0x69,0xBB},
{0xA9,0xD9,0xD9,0x70},
{0x7,0x8E,0x8E,0x89},
{0x33,0x94,0x94,0xA7},
{0x2D,0x9B,0x9B,0xB6},
{0x3C,0x1E,0x1E,0x22},
{0x15,0x87,0x87,0x92},
{0xC9,0xE9,0xE9,0x20},
{0x87,0xCE,0xCE,0x49},
{0xAA,0x55,0x55,0xFF},
{0x50,0x28,0x28,0x78},
{0xA5,0xDF,0xDF,0x7A},
{0x3,0x8C,0x8C,0x8F},
{0x59,0xA1,0xA1,0xF8},
{0x9,0x89,0x89,0x80},
{0x1A,0xD,0xD,0x17},
{0x65,0xBF,0xBF,0xDA},
{0xD7,0xE6,0xE6,0x31},
{0x84,0x42,0x42,0xC6},
{0xD0,0x68,0x68,0xB8},
{0x82,0x41,0x41,0xC3},
{0x29,0x99,0x99,0xB0},
{0x5A,0x2D,0x2D,0x77},
{0x1E,0xF,0xF,0x11},
{0x7B,0xB0,0xB0,0xCB},
{0xA8,0x54,0x54,0xFC},
{0x6D,0xBB,0xBB,0xD6},
{0x2C,0x16,0x16,0x3A}
};
unsigned char LookUpTwo[][4]={
{0xA5,0xC6,0x63,0x63},
{0x84,0xF8,0x7C,0x7C},
{0x99,0xEE,0x77,0x77},
{0x8D,0xF6,0x7B,0x7B},
{0xD,0xFF,0xF2,0xF2},
{0xBD,0xD6,0x6B,0x6B},
{0xB1,0xDE,0x6F,0x6F},
{0x54,0x91,0xC5,0xC5},
{0x50,0x60,0x30,0x30},
{0x3,0x2,0x1,0x1},
{0xA9,0xCE,0x67,0x67},
{0x7D,0x56,0x2B,0x2B},
{0x19,0xE7,0xFE,0xFE},
{0x62,0xB5,0xD7,0xD7},
{0xE6,0x4D,0xAB,0xAB},
{0x9A,0xEC,0x76,0x76},
{0x45,0x8F,0xCA,0xCA},
{0x9D,0x1F,0x82,0x82},
{0x40,0x89,0xC9,0xC9},
{0x87,0xFA,0x7D,0x7D},
{0x15,0xEF,0xFA,0xFA},
{0xEB,0xB2,0x59,0x59},
{0xC9,0x8E,0x47,0x47},
{0xB,0xFB,0xF0,0xF0},
{0xEC,0x41,0xAD,0xAD},
{0x67,0xB3,0xD4,0xD4},
{0xFD,0x5F,0xA2,0xA2},
{0xEA,0x45,0xAF,0xAF},
{0xBF,0x23,0x9C,0x9C},
{0xF7,0x53,0xA4,0xA4},
{0x96,0xE4,0x72,0x72},
{0x5B,0x9B,0xC0,0xC0},
{0xC2,0x75,0xB7,0xB7},
{0x1C,0xE1,0xFD,0xFD},
{0xAE,0x3D,0x93,0x93},
{0x6A,0x4C,0x26,0x26},
{0x5A,0x6C,0x36,0x36},
{0x41,0x7E,0x3F,0x3F},
{0x2,0xF5,0xF7,0xF7},
{0x4F,0x83,0xCC,0xCC},
{0x5C,0x68,0x34,0x34},
{0xF4,0x51,0xA5,0xA5},
{0x34,0xD1,0xE5,0xE5},
{0x8,0xF9,0xF1,0xF1},
{0x93,0xE2,0x71,0x71},
{0x73,0xAB,0xD8,0xD8},
{0x53,0x62,0x31,0x31},
{0x3F,0x2A,0x15,0x15},
{0xC,0x8,0x4,0x4},
{0x52,0x95,0xC7,0xC7},
{0x65,0x46,0x23,0x23},
{0x5E,0x9D,0xC3,0xC3},
{0x28,0x30,0x18,0x18},
{0xA1,0x37,0x96,0x96},
{0xF,0xA,0x5,0x5},
{0xB5,0x2F,0x9A,0x9A},
{0x9,0xE,0x7,0x7},
{0x36,0x24,0x12,0x12},
{0x9B,0x1B,0x80,0x80},
{0x3D,0xDF,0xE2,0xE2},
{0x26,0xCD,0xEB,0xEB},
{0x69,0x4E,0x27,0x27},
{0xCD,0x7F,0xB2,0xB2},
{0x9F,0xEA,0x75,0x75},
{0x1B,0x12,0x9,0x9},
{0x9E,0x1D,0x83,0x83},
{0x74,0x58,0x2C,0x2C},
{0x2E,0x34,0x1A,0x1A},
{0x2D,0x36,0x1B,0x1B},
{0xB2,0xDC,0x6E,0x6E},
{0xEE,0xB4,0x5A,0x5A},
{0xFB,0x5B,0xA0,0xA0},
{0xF6,0xA4,0x52,0x52},
{0x4D,0x76,0x3B,0x3B},
{0x61,0xB7,0xD6,0xD6},
{0xCE,0x7D,0xB3,0xB3},
{0x7B,0x52,0x29,0x29},
{0x3E,0xDD,0xE3,0xE3},
{0x71,0x5E,0x2F,0x2F},
{0x97,0x13,0x84,0x84},
{0xF5,0xA6,0x53,0x53},
{0x68,0xB9,0xD1,0xD1},
{0x0,0x0,0x0,0x0},
{0x2C,0xC1,0xED,0xED},
{0x60,0x40,0x20,0x20},
{0x1F,0xE3,0xFC,0xFC},
{0xC8,0x79,0xB1,0xB1},
{0xED,0xB6,0x5B,0x5B},
{0xBE,0xD4,0x6A,0x6A},
{0x46,0x8D,0xCB,0xCB},
{0xD9,0x67,0xBE,0xBE},
{0x4B,0x72,0x39,0x39},
{0xDE,0x94,0x4A,0x4A},
{0xD4,0x98,0x4C,0x4C},
{0xE8,0xB0,0x58,0x58},
{0x4A,0x85,0xCF,0xCF},
{0x6B,0xBB,0xD0,0xD0},
{0x2A,0xC5,0xEF,0xEF},
{0xE5,0x4F,0xAA,0xAA},
{0x16,0xED,0xFB,0xFB},
{0xC5,0x86,0x43,0x43},
{0xD7,0x9A,0x4D,0x4D},
{0x55,0x66,0x33,0x33},
{0x94,0x11,0x85,0x85},
{0xCF,0x8A,0x45,0x45},
{0x10,0xE9,0xF9,0xF9},
{0x6,0x4,0x2,0x2},
{0x81,0xFE,0x7F,0x7F},
{0xF0,0xA0,0x50,0x50},
{0x44,0x78,0x3C,0x3C},
{0xBA,0x25,0x9F,0x9F},
{0xE3,0x4B,0xA8,0xA8},
{0xF3,0xA2,0x51,0x51},
{0xFE,0x5D,0xA3,0xA3},
{0xC0,0x80,0x40,0x40},
{0x8A,0x5,0x8F,0x8F},
{0xAD,0x3F,0x92,0x92},
{0xBC,0x21,0x9D,0x9D},
{0x48,0x70,0x38,0x38},
{0x4,0xF1,0xF5,0xF5},
{0xDF,0x63,0xBC,0xBC},
{0xC1,0x77,0xB6,0xB6},
{0x75,0xAF,0xDA,0xDA},
{0x63,0x42,0x21,0x21},
{0x30,0x20,0x10,0x10},
{0x1A,0xE5,0xFF,0xFF},
{0xE,0xFD,0xF3,0xF3},
{0x6D,0xBF,0xD2,0xD2},
{0x4C,0x81,0xCD,0xCD},
{0x14,0x18,0xC,0xC},
{0x35,0x26,0x13,0x13},
{0x2F,0xC3,0xEC,0xEC},
{0xE1,0xBE,0x5F,0x5F},
{0xA2,0x35,0x97,0x97},
{0xCC,0x88,0x44,0x44},
{0x39,0x2E,0x17,0x17},
{0x57,0x93,0xC4,0xC4},
{0xF2,0x55,0xA7,0xA7},
{0x82,0xFC,0x7E,0x7E},
{0x47,0x7A,0x3D,0x3D},
{0xAC,0xC8,0x64,0x64},
{0xE7,0xBA,0x5D,0x5D},
{0x2B,0x32,0x19,0x19},
{0x95,0xE6,0x73,0x73},
{0xA0,0xC0,0x60,0x60},
{0x98,0x19,0x81,0x81},
{0xD1,0x9E,0x4F,0x4F},
{0x7F,0xA3,0xDC,0xDC},
{0x66,0x44,0x22,0x22},
{0x7E,0x54,0x2A,0x2A},
{0xAB,0x3B,0x90,0x90},
{0x83,0xB,0x88,0x88},
{0xCA,0x8C,0x46,0x46},
{0x29,0xC7,0xEE,0xEE},
{0xD3,0x6B,0xB8,0xB8},
{0x3C,0x28,0x14,0x14},
{0x79,0xA7,0xDE,0xDE},
{0xE2,0xBC,0x5E,0x5E},
{0x1D,0x16,0xB,0xB},
{0x76,0xAD,0xDB,0xDB},
{0x3B,0xDB,0xE0,0xE0},
{0x56,0x64,0x32,0x32},
{0x4E,0x74,0x3A,0x3A},
{0x1E,0x14,0xA,0xA},
{0xDB,0x92,0x49,0x49},
{0xA,0xC,0x6,0x6},
{0x6C,0x48,0x24,0x24},
{0xE4,0xB8,0x5C,0x5C},
{0x5D,0x9F,0xC2,0xC2},
{0x6E,0xBD,0xD3,0xD3},
{0xEF,0x43,0xAC,0xAC},
{0xA6,0xC4,0x62,0x62},
{0xA8,0x39,0x91,0x91},
{0xA4,0x31,0x95,0x95},
{0x37,0xD3,0xE4,0xE4},
{0x8B,0xF2,0x79,0x79},
{0x32,0xD5,0xE7,0xE7},
{0x43,0x8B,0xC8,0xC8},
{0x59,0x6E,0x37,0x37},
{0xB7,0xDA,0x6D,0x6D},
{0x8C,0x1,0x8D,0x8D},
{0x64,0xB1,0xD5,0xD5},
{0xD2,0x9C,0x4E,0x4E},
{0xE0,0x49,0xA9,0xA9},
{0xB4,0xD8,0x6C,0x6C},
{0xFA,0xAC,0x56,0x56},
{0x7,0xF3,0xF4,0xF4},
{0x25,0xCF,0xEA,0xEA},
{0xAF,0xCA,0x65,0x65},
{0x8E,0xF4,0x7A,0x7A},
{0xE9,0x47,0xAE,0xAE},
{0x18,0x10,0x8,0x8},
{0xD5,0x6F,0xBA,0xBA},
{0x88,0xF0,0x78,0x78},
{0x6F,0x4A,0x25,0x25},
{0x72,0x5C,0x2E,0x2E},
{0x24,0x38,0x1C,0x1C},
{0xF1,0x57,0xA6,0xA6},
{0xC7,0x73,0xB4,0xB4},
{0x51,0x97,0xC6,0xC6},
{0x23,0xCB,0xE8,0xE8},
{0x7C,0xA1,0xDD,0xDD},
{0x9C,0xE8,0x74,0x74},
{0x21,0x3E,0x1F,0x1F},
{0xDD,0x96,0x4B,0x4B},
{0xDC,0x61,0xBD,0xBD},
{0x86,0xD,0x8B,0x8B},
{0x85,0xF,0x8A,0x8A},
{0x90,0xE0,0x70,0x70},
{0x42,0x7C,0x3E,0x3E},
{0xC4,0x71,0xB5,0xB5},
{0xAA,0xCC,0x66,0x66},
{0xD8,0x90,0x48,0x48},
{0x5,0x6,0x3,0x3},
{0x1,0xF7,0xF6,0xF6},
{0x12,0x1C,0xE,0xE},
{0xA3,0xC2,0x61,0x61},
{0x5F,0x6A,0x35,0x35},
{0xF9,0xAE,0x57,0x57},
{0xD0,0x69,0xB9,0xB9},
{0x91,0x17,0x86,0x86},
{0x58,0x99,0xC1,0xC1},
{0x27,0x3A,0x1D,0x1D},
{0xB9,0x27,0x9E,0x9E},
{0x38,0xD9,0xE1,0xE1},
{0x13,0xEB,0xF8,0xF8},
{0xB3,0x2B,0x98,0x98},
{0x33,0x22,0x11,0x11},
{0xBB,0xD2,0x69,0x69},
{0x70,0xA9,0xD9,0xD9},
{0x89,0x7,0x8E,0x8E},
{0xA7,0x33,0x94,0x94},
{0xB6,0x2D,0x9B,0x9B},
{0x22,0x3C,0x1E,0x1E},
{0x92,0x15,0x87,0x87},
{0x20,0xC9,0xE9,0xE9},
{0x49,0x87,0xCE,0xCE},
{0xFF,0xAA,0x55,0x55},
{0x78,0x50,0x28,0x28},
{0x7A,0xA5,0xDF,0xDF},
{0x8F,0x3,0x8C,0x8C},
{0xF8,0x59,0xA1,0xA1},
{0x80,0x9,0x89,0x89},
{0x17,0x1A,0xD,0xD},
{0xDA,0x65,0xBF,0xBF},
{0x31,0xD7,0xE6,0xE6},
{0xC6,0x84,0x42,0x42},
{0xB8,0xD0,0x68,0x68},
{0xC3,0x82,0x41,0x41},
{0xB0,0x29,0x99,0x99},
{0x77,0x5A,0x2D,0x2D},
{0x11,0x1E,0xF,0xF},
{0xCB,0x7B,0xB0,0xB0},
{0xFC,0xA8,0x54,0x54},
{0xD6,0x6D,0xBB,0xBB},
{0x3A,0x2C,0x16,0x16}
};

unsigned char LookUpThree[256][4]={
{0x63,0xA5,0xC6,0x63},
{0x7C,0x84,0xF8,0x7C},
{0x77,0x99,0xEE,0x77},
{0x7B,0x8D,0xF6,0x7B},
{0xF2,0xD,0xFF,0xF2},
{0x6B,0xBD,0xD6,0x6B},
{0x6F,0xB1,0xDE,0x6F},
{0xC5,0x54,0x91,0xC5},
{0x30,0x50,0x60,0x30},
{0x1,0x3,0x2,0x1},
{0x67,0xA9,0xCE,0x67},
{0x2B,0x7D,0x56,0x2B},
{0xFE,0x19,0xE7,0xFE},
{0xD7,0x62,0xB5,0xD7},
{0xAB,0xE6,0x4D,0xAB},
{0x76,0x9A,0xEC,0x76},
{0xCA,0x45,0x8F,0xCA},
{0x82,0x9D,0x1F,0x82},
{0xC9,0x40,0x89,0xC9},
{0x7D,0x87,0xFA,0x7D},
{0xFA,0x15,0xEF,0xFA},
{0x59,0xEB,0xB2,0x59},
{0x47,0xC9,0x8E,0x47},
{0xF0,0xB,0xFB,0xF0},
{0xAD,0xEC,0x41,0xAD},
{0xD4,0x67,0xB3,0xD4},
{0xA2,0xFD,0x5F,0xA2},
{0xAF,0xEA,0x45,0xAF},
{0x9C,0xBF,0x23,0x9C},
{0xA4,0xF7,0x53,0xA4},
{0x72,0x96,0xE4,0x72},
{0xC0,0x5B,0x9B,0xC0},
{0xB7,0xC2,0x75,0xB7},
{0xFD,0x1C,0xE1,0xFD},
{0x93,0xAE,0x3D,0x93},
{0x26,0x6A,0x4C,0x26},
{0x36,0x5A,0x6C,0x36},
{0x3F,0x41,0x7E,0x3F},
{0xF7,0x2,0xF5,0xF7},
{0xCC,0x4F,0x83,0xCC},
{0x34,0x5C,0x68,0x34},
{0xA5,0xF4,0x51,0xA5},
{0xE5,0x34,0xD1,0xE5},
{0xF1,0x8,0xF9,0xF1},
{0x71,0x93,0xE2,0x71},
{0xD8,0x73,0xAB,0xD8},
{0x31,0x53,0x62,0x31},
{0x15,0x3F,0x2A,0x15},
{0x4,0xC,0x8,0x4},
{0xC7,0x52,0x95,0xC7},
{0x23,0x65,0x46,0x23},
{0xC3,0x5E,0x9D,0xC3},
{0x18,0x28,0x30,0x18},
{0x96,0xA1,0x37,0x96},
{0x5,0xF,0xA,0x5},
{0x9A,0xB5,0x2F,0x9A},
{0x7,0x9,0xE,0x7},
{0x12,0x36,0x24,0x12},
{0x80,0x9B,0x1B,0x80},
{0xE2,0x3D,0xDF,0xE2},
{0xEB,0x26,0xCD,0xEB},
{0x27,0x69,0x4E,0x27},
{0xB2,0xCD,0x7F,0xB2},
{0x75,0x9F,0xEA,0x75},
{0x9,0x1B,0x12,0x9},
{0x83,0x9E,0x1D,0x83},
{0x2C,0x74,0x58,0x2C},
{0x1A,0x2E,0x34,0x1A},
{0x1B,0x2D,0x36,0x1B},
{0x6E,0xB2,0xDC,0x6E},
{0x5A,0xEE,0xB4,0x5A},
{0xA0,0xFB,0x5B,0xA0},
{0x52,0xF6,0xA4,0x52},
{0x3B,0x4D,0x76,0x3B},
{0xD6,0x61,0xB7,0xD6},
{0xB3,0xCE,0x7D,0xB3},
{0x29,0x7B,0x52,0x29},
{0xE3,0x3E,0xDD,0xE3},
{0x2F,0x71,0x5E,0x2F},
{0x84,0x97,0x13,0x84},
{0x53,0xF5,0xA6,0x53},
{0xD1,0x68,0xB9,0xD1},
{0x0,0x0,0x0,0x0},
{0xED,0x2C,0xC1,0xED},
{0x20,0x60,0x40,0x20},
{0xFC,0x1F,0xE3,0xFC},
{0xB1,0xC8,0x79,0xB1},
{0x5B,0xED,0xB6,0x5B},
{0x6A,0xBE,0xD4,0x6A},
{0xCB,0x46,0x8D,0xCB},
{0xBE,0xD9,0x67,0xBE},
{0x39,0x4B,0x72,0x39},
{0x4A,0xDE,0x94,0x4A},
{0x4C,0xD4,0x98,0x4C},
{0x58,0xE8,0xB0,0x58},
{0xCF,0x4A,0x85,0xCF},
{0xD0,0x6B,0xBB,0xD0},
{0xEF,0x2A,0xC5,0xEF},
{0xAA,0xE5,0x4F,0xAA},
{0xFB,0x16,0xED,0xFB},
{0x43,0xC5,0x86,0x43},
{0x4D,0xD7,0x9A,0x4D},
{0x33,0x55,0x66,0x33},
{0x85,0x94,0x11,0x85},
{0x45,0xCF,0x8A,0x45},
{0xF9,0x10,0xE9,0xF9},
{0x2,0x6,0x4,0x2},
{0x7F,0x81,0xFE,0x7F},
{0x50,0xF0,0xA0,0x50},
{0x3C,0x44,0x78,0x3C},
{0x9F,0xBA,0x25,0x9F},
{0xA8,0xE3,0x4B,0xA8},
{0x51,0xF3,0xA2,0x51},
{0xA3,0xFE,0x5D,0xA3},
{0x40,0xC0,0x80,0x40},
{0x8F,0x8A,0x5,0x8F},
{0x92,0xAD,0x3F,0x92},
{0x9D,0xBC,0x21,0x9D},
{0x38,0x48,0x70,0x38},
{0xF5,0x4,0xF1,0xF5},
{0xBC,0xDF,0x63,0xBC},
{0xB6,0xC1,0x77,0xB6},
{0xDA,0x75,0xAF,0xDA},
{0x21,0x63,0x42,0x21},
{0x10,0x30,0x20,0x10},
{0xFF,0x1A,0xE5,0xFF},
{0xF3,0xE,0xFD,0xF3},
{0xD2,0x6D,0xBF,0xD2},
{0xCD,0x4C,0x81,0xCD},
{0xC,0x14,0x18,0xC},
{0x13,0x35,0x26,0x13},
{0xEC,0x2F,0xC3,0xEC},
{0x5F,0xE1,0xBE,0x5F},
{0x97,0xA2,0x35,0x97},
{0x44,0xCC,0x88,0x44},
{0x17,0x39,0x2E,0x17},
{0xC4,0x57,0x93,0xC4},
{0xA7,0xF2,0x55,0xA7},
{0x7E,0x82,0xFC,0x7E},
{0x3D,0x47,0x7A,0x3D},
{0x64,0xAC,0xC8,0x64},
{0x5D,0xE7,0xBA,0x5D},
{0x19,0x2B,0x32,0x19},
{0x73,0x95,0xE6,0x73},
{0x60,0xA0,0xC0,0x60},
{0x81,0x98,0x19,0x81},
{0x4F,0xD1,0x9E,0x4F},
{0xDC,0x7F,0xA3,0xDC},
{0x22,0x66,0x44,0x22},
{0x2A,0x7E,0x54,0x2A},
{0x90,0xAB,0x3B,0x90},
{0x88,0x83,0xB,0x88},
{0x46,0xCA,0x8C,0x46},
{0xEE,0x29,0xC7,0xEE},
{0xB8,0xD3,0x6B,0xB8},
{0x14,0x3C,0x28,0x14},
{0xDE,0x79,0xA7,0xDE},
{0x5E,0xE2,0xBC,0x5E},
{0xB,0x1D,0x16,0xB},
{0xDB,0x76,0xAD,0xDB},
{0xE0,0x3B,0xDB,0xE0},
{0x32,0x56,0x64,0x32},
{0x3A,0x4E,0x74,0x3A},
{0xA,0x1E,0x14,0xA},
{0x49,0xDB,0x92,0x49},
{0x6,0xA,0xC,0x6},
{0x24,0x6C,0x48,0x24},
{0x5C,0xE4,0xB8,0x5C},
{0xC2,0x5D,0x9F,0xC2},
{0xD3,0x6E,0xBD,0xD3},
{0xAC,0xEF,0x43,0xAC},
{0x62,0xA6,0xC4,0x62},
{0x91,0xA8,0x39,0x91},
{0x95,0xA4,0x31,0x95},
{0xE4,0x37,0xD3,0xE4},
{0x79,0x8B,0xF2,0x79},
{0xE7,0x32,0xD5,0xE7},
{0xC8,0x43,0x8B,0xC8},
{0x37,0x59,0x6E,0x37},
{0x6D,0xB7,0xDA,0x6D},
{0x8D,0x8C,0x1,0x8D},
{0xD5,0x64,0xB1,0xD5},
{0x4E,0xD2,0x9C,0x4E},
{0xA9,0xE0,0x49,0xA9},
{0x6C,0xB4,0xD8,0x6C},
{0x56,0xFA,0xAC,0x56},
{0xF4,0x7,0xF3,0xF4},
{0xEA,0x25,0xCF,0xEA},
{0x65,0xAF,0xCA,0x65},
{0x7A,0x8E,0xF4,0x7A},
{0xAE,0xE9,0x47,0xAE},
{0x8,0x18,0x10,0x8},
{0xBA,0xD5,0x6F,0xBA},
{0x78,0x88,0xF0,0x78},
{0x25,0x6F,0x4A,0x25},
{0x2E,0x72,0x5C,0x2E},
{0x1C,0x24,0x38,0x1C},
{0xA6,0xF1,0x57,0xA6},
{0xB4,0xC7,0x73,0xB4},
{0xC6,0x51,0x97,0xC6},
{0xE8,0x23,0xCB,0xE8},
{0xDD,0x7C,0xA1,0xDD},
{0x74,0x9C,0xE8,0x74},
{0x1F,0x21,0x3E,0x1F},
{0x4B,0xDD,0x96,0x4B},
{0xBD,0xDC,0x61,0xBD},
{0x8B,0x86,0xD,0x8B},
{0x8A,0x85,0xF,0x8A},
{0x70,0x90,0xE0,0x70},
{0x3E,0x42,0x7C,0x3E},
{0xB5,0xC4,0x71,0xB5},
{0x66,0xAA,0xCC,0x66},
{0x48,0xD8,0x90,0x48},
{0x3,0x5,0x6,0x3},
{0xF6,0x1,0xF7,0xF6},
{0xE,0x12,0x1C,0xE},
{0x61,0xA3,0xC2,0x61},
{0x35,0x5F,0x6A,0x35},
{0x57,0xF9,0xAE,0x57},
{0xB9,0xD0,0x69,0xB9},
{0x86,0x91,0x17,0x86},
{0xC1,0x58,0x99,0xC1},
{0x1D,0x27,0x3A,0x1D},
{0x9E,0xB9,0x27,0x9E},
{0xE1,0x38,0xD9,0xE1},
{0xF8,0x13,0xEB,0xF8},
{0x98,0xB3,0x2B,0x98},
{0x11,0x33,0x22,0x11},
{0x69,0xBB,0xD2,0x69},
{0xD9,0x70,0xA9,0xD9},
{0x8E,0x89,0x7,0x8E},
{0x94,0xA7,0x33,0x94},
{0x9B,0xB6,0x2D,0x9B},
{0x1E,0x22,0x3C,0x1E},
{0x87,0x92,0x15,0x87},
{0xE9,0x20,0xC9,0xE9},
{0xCE,0x49,0x87,0xCE},
{0x55,0xFF,0xAA,0x55},
{0x28,0x78,0x50,0x28},
{0xDF,0x7A,0xA5,0xDF},
{0x8C,0x8F,0x3,0x8C},
{0xA1,0xF8,0x59,0xA1},
{0x89,0x80,0x9,0x89},
{0xD,0x17,0x1A,0xD},
{0xBF,0xDA,0x65,0xBF},
{0xE6,0x31,0xD7,0xE6},
{0x42,0xC6,0x84,0x42},
{0x68,0xB8,0xD0,0x68},
{0x41,0xC3,0x82,0x41},
{0x99,0xB0,0x29,0x99},
{0x2D,0x77,0x5A,0x2D},
{0xF,0x11,0x1E,0xF},
{0xB0,0xCB,0x7B,0xB0},
{0x54,0xFC,0xA8,0x54},
{0xBB,0xD6,0x6D,0xBB},
{0x16,0x3A,0x2C,0x16}
};
unsigned char LookUpFour[256][4]={
{0x63,0x63,0xA5,0xC6},
{0x7C,0x7C,0x84,0xF8},
{0x77,0x77,0x99,0xEE},
{0x7B,0x7B,0x8D,0xF6},
{0xF2,0xF2,0xD,0xFF},
{0x6B,0x6B,0xBD,0xD6},
{0x6F,0x6F,0xB1,0xDE},
{0xC5,0xC5,0x54,0x91},
{0x30,0x30,0x50,0x60},
{0x1,0x1,0x3,0x2},
{0x67,0x67,0xA9,0xCE},
{0x2B,0x2B,0x7D,0x56},
{0xFE,0xFE,0x19,0xE7},
{0xD7,0xD7,0x62,0xB5},
{0xAB,0xAB,0xE6,0x4D},
{0x76,0x76,0x9A,0xEC},
{0xCA,0xCA,0x45,0x8F},
{0x82,0x82,0x9D,0x1F},
{0xC9,0xC9,0x40,0x89},
{0x7D,0x7D,0x87,0xFA},
{0xFA,0xFA,0x15,0xEF},
{0x59,0x59,0xEB,0xB2},
{0x47,0x47,0xC9,0x8E},
{0xF0,0xF0,0xB,0xFB},
{0xAD,0xAD,0xEC,0x41},
{0xD4,0xD4,0x67,0xB3},
{0xA2,0xA2,0xFD,0x5F},
{0xAF,0xAF,0xEA,0x45},
{0x9C,0x9C,0xBF,0x23},
{0xA4,0xA4,0xF7,0x53},
{0x72,0x72,0x96,0xE4},
{0xC0,0xC0,0x5B,0x9B},
{0xB7,0xB7,0xC2,0x75},
{0xFD,0xFD,0x1C,0xE1},
{0x93,0x93,0xAE,0x3D},
{0x26,0x26,0x6A,0x4C},
{0x36,0x36,0x5A,0x6C},
{0x3F,0x3F,0x41,0x7E},
{0xF7,0xF7,0x2,0xF5},
{0xCC,0xCC,0x4F,0x83},
{0x34,0x34,0x5C,0x68},
{0xA5,0xA5,0xF4,0x51},
{0xE5,0xE5,0x34,0xD1},
{0xF1,0xF1,0x8,0xF9},
{0x71,0x71,0x93,0xE2},
{0xD8,0xD8,0x73,0xAB},
{0x31,0x31,0x53,0x62},
{0x15,0x15,0x3F,0x2A},
{0x4,0x4,0xC,0x8},
{0xC7,0xC7,0x52,0x95},
{0x23,0x23,0x65,0x46},
{0xC3,0xC3,0x5E,0x9D},
{0x18,0x18,0x28,0x30},
{0x96,0x96,0xA1,0x37},
{0x5,0x5,0xF,0xA},
{0x9A,0x9A,0xB5,0x2F},
{0x7,0x7,0x9,0xE},
{0x12,0x12,0x36,0x24},
{0x80,0x80,0x9B,0x1B},
{0xE2,0xE2,0x3D,0xDF},
{0xEB,0xEB,0x26,0xCD},
{0x27,0x27,0x69,0x4E},
{0xB2,0xB2,0xCD,0x7F},
{0x75,0x75,0x9F,0xEA},
{0x9,0x9,0x1B,0x12},
{0x83,0x83,0x9E,0x1D},
{0x2C,0x2C,0x74,0x58},
{0x1A,0x1A,0x2E,0x34},
{0x1B,0x1B,0x2D,0x36},
{0x6E,0x6E,0xB2,0xDC},
{0x5A,0x5A,0xEE,0xB4},
{0xA0,0xA0,0xFB,0x5B},
{0x52,0x52,0xF6,0xA4},
{0x3B,0x3B,0x4D,0x76},
{0xD6,0xD6,0x61,0xB7},
{0xB3,0xB3,0xCE,0x7D},
{0x29,0x29,0x7B,0x52},
{0xE3,0xE3,0x3E,0xDD},
{0x2F,0x2F,0x71,0x5E},
{0x84,0x84,0x97,0x13},
{0x53,0x53,0xF5,0xA6},
{0xD1,0xD1,0x68,0xB9},
{0x0,0x0,0x0,0x0},
{0xED,0xED,0x2C,0xC1},
{0x20,0x20,0x60,0x40},
{0xFC,0xFC,0x1F,0xE3},
{0xB1,0xB1,0xC8,0x79},
{0x5B,0x5B,0xED,0xB6},
{0x6A,0x6A,0xBE,0xD4},
{0xCB,0xCB,0x46,0x8D},
{0xBE,0xBE,0xD9,0x67},
{0x39,0x39,0x4B,0x72},
{0x4A,0x4A,0xDE,0x94},
{0x4C,0x4C,0xD4,0x98},
{0x58,0x58,0xE8,0xB0},
{0xCF,0xCF,0x4A,0x85},
{0xD0,0xD0,0x6B,0xBB},
{0xEF,0xEF,0x2A,0xC5},
{0xAA,0xAA,0xE5,0x4F},
{0xFB,0xFB,0x16,0xED},
{0x43,0x43,0xC5,0x86},
{0x4D,0x4D,0xD7,0x9A},
{0x33,0x33,0x55,0x66},
{0x85,0x85,0x94,0x11},
{0x45,0x45,0xCF,0x8A},
{0xF9,0xF9,0x10,0xE9},
{0x2,0x2,0x6,0x4},
{0x7F,0x7F,0x81,0xFE},
{0x50,0x50,0xF0,0xA0},
{0x3C,0x3C,0x44,0x78},
{0x9F,0x9F,0xBA,0x25},
{0xA8,0xA8,0xE3,0x4B},
{0x51,0x51,0xF3,0xA2},
{0xA3,0xA3,0xFE,0x5D},
{0x40,0x40,0xC0,0x80},
{0x8F,0x8F,0x8A,0x5},
{0x92,0x92,0xAD,0x3F},
{0x9D,0x9D,0xBC,0x21},
{0x38,0x38,0x48,0x70},
{0xF5,0xF5,0x4,0xF1},
{0xBC,0xBC,0xDF,0x63},
{0xB6,0xB6,0xC1,0x77},
{0xDA,0xDA,0x75,0xAF},
{0x21,0x21,0x63,0x42},
{0x10,0x10,0x30,0x20},
{0xFF,0xFF,0x1A,0xE5},
{0xF3,0xF3,0xE,0xFD},
{0xD2,0xD2,0x6D,0xBF},
{0xCD,0xCD,0x4C,0x81},
{0xC,0xC,0x14,0x18},
{0x13,0x13,0x35,0x26},
{0xEC,0xEC,0x2F,0xC3},
{0x5F,0x5F,0xE1,0xBE},
{0x97,0x97,0xA2,0x35},
{0x44,0x44,0xCC,0x88},
{0x17,0x17,0x39,0x2E},
{0xC4,0xC4,0x57,0x93},
{0xA7,0xA7,0xF2,0x55},
{0x7E,0x7E,0x82,0xFC},
{0x3D,0x3D,0x47,0x7A},
{0x64,0x64,0xAC,0xC8},
{0x5D,0x5D,0xE7,0xBA},
{0x19,0x19,0x2B,0x32},
{0x73,0x73,0x95,0xE6},
{0x60,0x60,0xA0,0xC0},
{0x81,0x81,0x98,0x19},
{0x4F,0x4F,0xD1,0x9E},
{0xDC,0xDC,0x7F,0xA3},
{0x22,0x22,0x66,0x44},
{0x2A,0x2A,0x7E,0x54},
{0x90,0x90,0xAB,0x3B},
{0x88,0x88,0x83,0xB},
{0x46,0x46,0xCA,0x8C},
{0xEE,0xEE,0x29,0xC7},
{0xB8,0xB8,0xD3,0x6B},
{0x14,0x14,0x3C,0x28},
{0xDE,0xDE,0x79,0xA7},
{0x5E,0x5E,0xE2,0xBC},
{0xB,0xB,0x1D,0x16},
{0xDB,0xDB,0x76,0xAD},
{0xE0,0xE0,0x3B,0xDB},
{0x32,0x32,0x56,0x64},
{0x3A,0x3A,0x4E,0x74},
{0xA,0xA,0x1E,0x14},
{0x49,0x49,0xDB,0x92},
{0x6,0x6,0xA,0xC},
{0x24,0x24,0x6C,0x48},
{0x5C,0x5C,0xE4,0xB8},
{0xC2,0xC2,0x5D,0x9F},
{0xD3,0xD3,0x6E,0xBD},
{0xAC,0xAC,0xEF,0x43},
{0x62,0x62,0xA6,0xC4},
{0x91,0x91,0xA8,0x39},
{0x95,0x95,0xA4,0x31},
{0xE4,0xE4,0x37,0xD3},
{0x79,0x79,0x8B,0xF2},
{0xE7,0xE7,0x32,0xD5},
{0xC8,0xC8,0x43,0x8B},
{0x37,0x37,0x59,0x6E},
{0x6D,0x6D,0xB7,0xDA},
{0x8D,0x8D,0x8C,0x1},
{0xD5,0xD5,0x64,0xB1},
{0x4E,0x4E,0xD2,0x9C},
{0xA9,0xA9,0xE0,0x49},
{0x6C,0x6C,0xB4,0xD8},
{0x56,0x56,0xFA,0xAC},
{0xF4,0xF4,0x7,0xF3},
{0xEA,0xEA,0x25,0xCF},
{0x65,0x65,0xAF,0xCA},
{0x7A,0x7A,0x8E,0xF4},
{0xAE,0xAE,0xE9,0x47},
{0x8,0x8,0x18,0x10},
{0xBA,0xBA,0xD5,0x6F},
{0x78,0x78,0x88,0xF0},
{0x25,0x25,0x6F,0x4A},
{0x2E,0x2E,0x72,0x5C},
{0x1C,0x1C,0x24,0x38},
{0xA6,0xA6,0xF1,0x57},
{0xB4,0xB4,0xC7,0x73},
{0xC6,0xC6,0x51,0x97},
{0xE8,0xE8,0x23,0xCB},
{0xDD,0xDD,0x7C,0xA1},
{0x74,0x74,0x9C,0xE8},
{0x1F,0x1F,0x21,0x3E},
{0x4B,0x4B,0xDD,0x96},
{0xBD,0xBD,0xDC,0x61},
{0x8B,0x8B,0x86,0xD},
{0x8A,0x8A,0x85,0xF},
{0x70,0x70,0x90,0xE0},
{0x3E,0x3E,0x42,0x7C},
{0xB5,0xB5,0xC4,0x71},
{0x66,0x66,0xAA,0xCC},
{0x48,0x48,0xD8,0x90},
{0x3,0x3,0x5,0x6},
{0xF6,0xF6,0x1,0xF7},
{0xE,0xE,0x12,0x1C},
{0x61,0x61,0xA3,0xC2},
{0x35,0x35,0x5F,0x6A},
{0x57,0x57,0xF9,0xAE},
{0xB9,0xB9,0xD0,0x69},
{0x86,0x86,0x91,0x17},
{0xC1,0xC1,0x58,0x99},
{0x1D,0x1D,0x27,0x3A},
{0x9E,0x9E,0xB9,0x27},
{0xE1,0xE1,0x38,0xD9},
{0xF8,0xF8,0x13,0xEB},
{0x98,0x98,0xB3,0x2B},
{0x11,0x11,0x33,0x22},
{0x69,0x69,0xBB,0xD2},
{0xD9,0xD9,0x70,0xA9},
{0x8E,0x8E,0x89,0x7},
{0x94,0x94,0xA7,0x33},
{0x9B,0x9B,0xB6,0x2D},
{0x1E,0x1E,0x22,0x3C},
{0x87,0x87,0x92,0x15},
{0xE9,0xE9,0x20,0xC9},
{0xCE,0xCE,0x49,0x87},
{0x55,0x55,0xFF,0xAA},
{0x28,0x28,0x78,0x50},
{0xDF,0xDF,0x7A,0xA5},
{0x8C,0x8C,0x8F,0x3},
{0xA1,0xA1,0xF8,0x59},
{0x89,0x89,0x80,0x9},
{0xD,0xD,0x17,0x1A},
{0xBF,0xBF,0xDA,0x65},
{0xE6,0xE6,0x31,0xD7},
{0x42,0x42,0xC6,0x84},
{0x68,0x68,0xB8,0xD0},
{0x41,0x41,0xC3,0x82},
{0x99,0x99,0xB0,0x29},
{0x2D,0x2D,0x77,0x5A},
{0xF,0xF,0x11,0x1E},
{0xB0,0xB0,0xCB,0x7B},
{0x54,0x54,0xFC,0xA8},
{0xBB,0xBB,0xD6,0x6D},
{0x16,0x16,0x3A,0x2C}
};

unsigned char SBoxMultiBy1[] =   {
	//0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, //0
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, //1
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, //2
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, //3
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, //4
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, //5
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, //6
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, //7
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, //8
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, //9
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, //A
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, //B
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, //C
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, //D
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, //E
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16 }; //F

unsigned char SBoxMultiBy2[]=
{0xC6,0xF8,0xEE,0xF6,0xFF,0xD6,0xDE,0x91,0x60,0x2,0xCE,0x56,0xE7,0xB5,0x4D,0xEC,0x8F,0x1F,0x89,0xFA,0xEF,0xB2,0x8E,0xFB,0x41,0xB3,0x5F,0x45,0x23,0x53,0xE4,0x9B,0x75,0xE1,0x3D,0x4C,0x6C,0x7E,0xF5,0x83,0x68,0x51,0xD1,0xF9,0xE2,0xAB,0x62,0x2A,0x8,0x95,0x46,0x9D,0x30,0x37,0xA,0x2F,0xE,0x24,0x1B,0xDF,0xCD,0x4E,0x7F,0xEA,0x12,0x1D,0x58,0x34,0x36,0xDC,0xB4,0x5B,0xA4,0x76,0xB7,0x7D,0x52,0xDD,0x5E,0x13,0xA6,0xB9,0x0,0xC1,0x40,0xE3,0x79,0xB6,0xD4,0x8D,0x67,0x72,0x94,0x98,0xB0,0x85,0xBB,0xC5,0x4F,0xED,0x86,0x9A,0x66,0x11,0x8A,0xE9,0x4,0xFE,0xA0,0x78,0x25,0x4B,0xA2,0x5D,0x80,0x5,0x3F,0x21,0x70,0xF1,0x63,0x77,0xAF,0x42,0x20,0xE5,0xFD,0xBF,0x81,0x18,0x26,0xC3,0xBE,0x35,0x88,0x2E,0x93,0x55,0xFC,0x7A,0xC8,0xBA,0x32,0xE6,0xC0,0x19,0x9E,0xA3,0x44,0x54,0x3B,0xB,0x8C,0xC7,0x6B,0x28,0xA7,0xBC,0x16,0xAD,0xDB,0x64,0x74,0x14,0x92,0xC,0x48,0xB8,0x9F,0xBD,0x43,0xC4,0x39,0x31,0xD3,0xF2,0xD5,0x8B,0x6E,0xDA,0x1,0xB1,0x9C,0x49,0xD8,0xAC,0xF3,0xCF,0xCA,0xF4,0x47,0x10,0x6F,0xF0,0x4A,0x5C,0x38,0x57,0x73,0x97,0xCB,0xA1,0xE8,0x3E,0x96,0x61,0xD,0xF,0xE0,0x7C,0x71,0xCC,0x90,0x6,0xF7,0x1C,0xC2,0x6A,0xAE,0x69,0x17,0x99,0x3A,0x27,0xD9,0xEB,0x2B,0x22,0xD2,0xA9,0x7,0x33,0x2D,0x3C,0x15,0xC9,0x87,0xAA,0x50,0xA5,0x3,0x59,0x9,0x1A,0x65,0xD7,0x84,0xD0,0x82,0x29,0x5A,0x1E,0x7B,0xA8,0x6D,0x2C};

unsigned char SBoxMultiBy3[]=
{
0xA5,0x84,0x99,0x8D,0xD,0xBD,0xB1,0x54,0x50,0x3,0xA9,0x7D,0x19,0x62,0xE6,0x9A,0x45,0x9D,0x40,0x87,0x15,0xEB,0xC9,0xB,0xEC,0x67,0xFD,0xEA,0xBF,0xF7,0x96,0x5B,0xC2,0x1C,0xAE,0x6A,0x5A,0x41,0x2,0x4F,0x5C,0xF4,0x34,0x8,0x93,0x73,0x53,0x3F,0xC,0x52,0x65,0x5E,0x28,0xA1,0xF,0xB5,0x9,0x36,0x9B,0x3D,0x26,0x69,0xCD,0x9F,0x1B,0x9E,0x74,0x2E,0x2D,0xB2,0xEE,0xFB,0xF6,0x4D,0x61,0xCE,0x7B,0x3E,0x71,0x97,0xF5,0x68,0x0,0x2C,0x60,0x1F,0xC8,0xED,0xBE,0x46,0xD9,0x4B,0xDE,0xD4,0xE8,0x4A,0x6B,0x2A,0xE5,0x16,0xC5,0xD7,0x55,0x94,0xCF,0x10,0x6,0x81,0xF0,0x44,0xBA,0xE3,0xF3,0xFE,0xC0,0x8A,0xAD,0xBC,0x48,0x4,0xDF,0xC1,0x75,0x63,0x30,0x1A,0xE,0x6D,0x4C,0x14,0x35,0x2F,0xE1,0xA2,0xCC,0x39,0x57,0xF2,0x82,0x47,0xAC,0xE7,0x2B,0x95,0xA0,0x98,0xD1,0x7F,0x66,0x7E,0xAB,0x83,0xCA,0x29,0xD3,0x3C,0x79,0xE2,0x1D,0x76,0x3B,0x56,0x4E,0x1E,0xDB,0xA,0x6C,0xE4,0x5D,0x6E,0xEF,0xA6,0xA8,0xA4,0x37,0x8B,0x32,0x43,0x59,0xB7,0x8C,0x64,0xD2,0xE0,0xB4,0xFA,0x7,0x25,0xAF,0x8E,0xE9,0x18,0xD5,0x88,0x6F,0x72,0x24,0xF1,0xC7,0x51,0x23,0x7C,0x9C,0x21,0xDD,0xDC,0x86,0x85,0x90,0x42,0xC4,0xAA,0xD8,0x5,0x1,0x12,0xA3,0x5F,0xF9,0xD0,0x91,0x58,0x27,0xB9,0x38,0x13,0xB3,0x33,0xBB,0x70,0x89,0xA7,0xB6,0x22,0x92,0x20,0x49,0xFF,0x78,0x7A,0x8F,0xF8,0x80,0x17,0xDA,0x31,0xC6,0xB8,0xC3,0xB0,0x77,0x11,0xCB,0xFC,0xD6,0x3A};

unsigned char inverseOfSBox[] =
{0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D};

unsigned char sBoxInverseMultiBy0x09[]=
{0xF4,0x41,0x17,0x27,0xAB,0x9D,0xFA,0xE3,0x30,0x76,0xCC,0x2,0xE5,0x2A,0x35,0x62,0xB1,0xBA,0xEA,0xFE,0x2F,0x4C,0x46,0xD3,0x8F,0x92,0x6D,0x52,0xBE,0x74,0xE0,0xC9,0xC2,0x8E,0x58,0xB9,0xE1,0x88,0x20,0xCE,0xDF,0x1A,0x51,0x53,0x64,0x6B,0x81,0x8,0x48,0x45,0xDE,0x7B,0x73,0x4B,0x1F,0x55,0xEB,0xB5,0xC5,0x37,0x28,0xBF,0x3,0x16,0xCF,0x79,0x7,0x69,0xDA,0x5,0x34,0xA6,0x2E,0xF3,0x8A,0xF6,0x83,0x60,0x71,0x6E,0x21,0xDD,0x3E,0xE6,0x54,0xC4,0x6,0x50,0x98,0xBD,0x40,0xD9,0xE8,0x89,0x19,0xC8,0x7C,0x42,0x84,0x0,0x80,0x2B,0x11,0x5A,0xE,0x85,0xAE,0x2D,0xF,0x5C,0x5B,0x36,0xA,0x57,0xEE,0x9B,0xC0,0xDC,0x77,0x12,0x93,0xA0,0x22,0x1B,0x9,0x8B,0xB6,0x1E,0xF1,0x75,0x99,0x7F,0x1,0x72,0x66,0xFB,0x43,0x23,0xED,0xE4,0x31,0x63,0x97,0xC6,0x4A,0xBB,0xF9,0x29,0x9E,0xB2,0x86,0xC1,0xB3,0x70,0x94,0xE9,0xFC,0xF0,0x7D,0x33,0x49,0x38,0xCA,0xD4,0xF5,0x7A,0xB7,0xAD,0x3A,0x78,0x5F,0x7E,0x8D,0xD8,0x39,0xC3,0x5D,0xD0,0xD5,0x25,0xAC,0x18,0x9C,0x3B,0x26,0x59,0x9A,0x4F,0x95,0xFF,0xBC,0x15,0xE7,0x6F,0x9F,0xB0,0xA4,0x3F,0xA5,0xA2,0x4E,0x82,0x90,0xA7,0x4,0xEC,0xCD,0x91,0x4D,0xEF,0xAA,0x96,0xD1,0x6A,0x2C,0x65,0x5E,0x8C,0x87,0xB,0x67,0xDB,0x10,0xD6,0xD7,0xA1,0xF8,0x13,0xA9,0x61,0x1C,0x47,0xD2,0xF2,0x14,0xC7,0xF7,0xFD,0x3D,0x44,0xAF,0x68,0x24,0xA3,0x1D,0xE2,0x3C,0xD,0xA8,0xC,0xB4,0x56,0xCB,0x32,0x6C,0xB8};
unsigned char sBoxInverseMultiBy0x0b[]=
{0x50,0x53,0xC3,0x96,0xCB,0xF1,0xAB,0x93,0x55,0xF6,0x91,0x25,0xFC,0xD7,0x80,0x8F,0x49,0x67,0x98,0xE1,0x2,0x12,0xA3,0xC6,0xE7,0x95,0xEB,0xDA,0x2D,0xD3,0x29,0x44,0x6A,0x78,0x6B,0xDD,0xB6,0x17,0x66,0xB4,0x18,0x82,0x60,0x45,0xE0,0x84,0x1C,0x94,0x58,0x19,0x87,0xB7,0x23,0xE2,0x57,0x2A,0x7,0x3,0x9A,0xA5,0xF2,0xB2,0xBA,0x5C,0x2B,0x92,0xF0,0xA1,0xCD,0xD5,0x1F,0x8A,0x9D,0xA0,0x32,0x75,0x39,0xAA,0x6,0x51,0xF9,0x3D,0xAE,0x46,0xB5,0x5,0x6F,0xFF,0x24,0x97,0xCC,0x77,0xBD,0x88,0x38,0xDB,0x47,0xE9,0xC9,0x0,0x83,0x48,0xAC,0x4E,0xFB,0x56,0x1E,0x27,0x64,0x21,0xD1,0x3A,0xB1,0xF,0xD2,0x9E,0x4F,0xA2,0x69,0x16,0xA,0xE5,0x43,0x1D,0xB,0xAD,0xB9,0xC8,0x85,0x4C,0xBB,0xFD,0x9F,0xBC,0xC5,0x34,0x76,0xDC,0x68,0x63,0xCA,0x10,0x40,0x20,0x7D,0xF8,0x11,0x6D,0x4B,0xF3,0xEC,0xD0,0x6C,0x99,0xFA,0x22,0xC4,0x1A,0xD8,0xEF,0xC7,0xC1,0xFE,0x36,0xCF,0x28,0x26,0xA4,0xE4,0xD,0x9B,0x62,0xC2,0xE8,0x5E,0xF5,0xBE,0x7C,0xA9,0xB3,0x3B,0xA7,0x6E,0x7B,0x9,0xF4,0x1,0xA8,0x65,0x7E,0x8,0xE6,0xD9,0xCE,0xD4,0xD6,0xAF,0x31,0x30,0xC0,0x37,0xA6,0xB0,0x15,0x4A,0xF7,0xE,0x2F,0x8D,0x4D,0x54,0xDF,0xE3,0x1B,0xB8,0x7F,0x4,0x5D,0x73,0x2E,0x5A,0x52,0x33,0x13,0x8C,0x7A,0x8E,0x89,0xEE,0x35,0xED,0x3C,0x59,0x3F,0x79,0xBF,0xEA,0x5B,0x14,0x86,0x81,0x3E,0x2C,0x5F,0x72,0xC,0x8B,0x41,0x71,0xDE,0x9C,0x90,0x61,0x70,0x74,0x42};
unsigned char sBoxInverseMultiBy0x0d[]=
{0xA7,0x65,0xA4,0x5E,0x6B,0x45,0x58,0x3,0xFA,0x6D,0x76,0x4C,0xD7,0xCB,0x44,0xA3,0x5A,0x1B,0xE,0xC0,0x75,0xF0,0x97,0xF9,0x5F,0x9C,0x7A,0x59,0x83,0x21,0x69,0xC8,0x89,0x79,0x3E,0x71,0x4F,0xAD,0xAC,0x3A,0x4A,0x31,0x33,0x7F,0x77,0xAE,0xA0,0x2B,0x68,0xFD,0x6C,0xF8,0xD3,0x2,0x8F,0xAB,0x28,0xC2,0x7B,0x8,0x87,0xA5,0x6A,0x82,0x1C,0xB4,0xF2,0xE2,0xF4,0xBE,0x62,0xFE,0x53,0x55,0xE1,0xEB,0xEC,0xEF,0x9F,0x10,0x8A,0x6,0x5,0xBD,0x8D,0x5D,0xD4,0x15,0xFB,0xE9,0x43,0x9E,0x42,0x8B,0x5B,0xEE,0xA,0xF,0x1E,0x0,0x86,0xED,0x70,0x72,0xFF,0x38,0xD5,0x39,0xD9,0xA6,0x54,0x2E,0x67,0xE7,0x96,0x91,0xC5,0x20,0x4B,0x1A,0xBA,0x2A,0xE0,0x17,0xD,0xC7,0xA8,0xA9,0x19,0x7,0xDD,0x60,0x26,0xF5,0x3B,0x7E,0x29,0xC6,0xFC,0xF1,0xDC,0x85,0x22,0x11,0x24,0x3D,0x32,0xA1,0x2F,0x30,0x52,0xE3,0x16,0xB9,0x48,0x64,0x8C,0x3F,0x2C,0x90,0x4E,0xD1,0xA2,0xB,0x81,0xDE,0x8E,0xBF,0x9D,0x92,0xCC,0x46,0x13,0xB8,0xF7,0xAF,0x80,0x93,0x2D,0x12,0x99,0x7D,0x63,0xBB,0x78,0x18,0xB7,0x9A,0x6E,0xE6,0xCF,0xE8,0x9B,0x36,0x9,0x7C,0xB2,0x23,0x94,0x66,0xBC,0xCA,0xD0,0xD8,0x98,0xDA,0x50,0xF6,0xD6,0xB0,0x4D,0x4,0xB5,0x88,0x1F,0x51,0xEA,0x35,0x74,0x41,0x1D,0xD2,0x56,0x47,0x61,0xC,0x14,0x3C,0x27,0xC9,0xE5,0xB1,0xDF,0x73,0xCE,0x37,0xCD,0xAA,0x6F,0xDB,0xF3,0xC4,0x34,0x40,0xC3,0x25,0x49,0x95,0x1,0xB3,0xE4,0xC1,0x84,0xB6,0x5C,0x57};
unsigned char sBoxInverseMultiBy0x0e[]={
0x51,0x7E,0x1A,0x3A,0x3B,0x1F,0xAC,0x4B,0x20,0xAD,0x88,0xF5,0x4F,0xC5,0x26,0xB5,0xDE,0x25,0x45,0x5D,0xC3,0x81,0x8D,0x6B,0x3,0x15,0xBF,0x95,0xD4,0x58,0x49,0x8E,0x75,0xF4,0x99,0x27,0xBE,0xF0,0xC9,0x7D,0x63,0xE5,0x97,0x62,0xB1,0xBB,0xFE,0xF9,0x70,0x8F,0x94,0x52,0xAB,0x72,0xE3,0x66,0xB2,0x2F,0x86,0xD3,0x30,0x23,0x2,0xED,0x8A,0xA7,0xF3,0x4E,0x65,0x6,0xD1,0xC4,0x34,0xA2,0x5,0xA4,0xB,0x40,0x5E,0xBD,0x3E,0x96,0xDD,0x4D,0x91,0x71,0x4,0x60,0x19,0xD6,0x89,0x67,0xB0,0x7,0xE7,0x79,0xA1,0x7C,0xF8,0x0,0x9,0x32,0x1E,0x6C,0xFD,0xF,0x3D,0x36,0xA,0x68,0x9B,0x24,0xC,0x93,0xB4,0x1B,0x80,0x61,0x5A,0x1C,0xE2,0xC0,0x3C,0x12,0xE,0xF2,0x2D,0x14,0x57,0xAF,0xEE,0xA3,0xF7,0x5C,0x44,0x5B,0x8B,0xCB,0xB6,0xB8,0xD7,0x42,0x13,0x84,0x85,0xD2,0xAE,0xC7,0x1D,0xDC,0xD,0x77,0x2B,0xA9,0x11,0x47,0xA8,0xA0,0x56,0x22,0x87,0xD9,0x8C,0x98,0xA6,0xA5,0xDA,0x3F,0x2C,0x50,0x6A,0x54,0xF6,0x90,0x2E,0x82,0x9F,0x69,0x6F,0xCF,0xC8,0x10,0xE8,0xDB,0xCD,0x6E,0xEC,0x83,0xE6,0xAA,0x21,0xEF,0xBA,0x4A,0xEA,0x29,0x31,0x2A,0xC6,0x35,0x74,0xFC,0xE0,0x33,0xF1,0x41,0x7F,0x17,0x76,0x43,0xCC,0xE4,0x9E,0x4C,0xC1,0x46,0x9D,0x1,0xFA,0xFB,0xB3,0x92,0xE9,0x6D,0x9A,0x37,0x59,0xEB,0xCE,0xB7,0xE1,0x7A,0x9C,0x55,0x18,0x73,0x53,0x5F,0xDF,0x78,0xCA,0xB9,0x38,0xC2,0x16,0xBC,0x28,0xFF,0x39,0x8,0xD8,0x64,0x7B,0xD5,0x48,0xD0};

unsigned char lookOneInverse[][4]={
{0x51,0xF4,0xA7,0x50},
{0x7E,0x41,0x65,0x53},
{0x1A,0x17,0xA4,0xC3},
{0x3A,0x27,0x5E,0x96},
{0x3B,0xAB,0x6B,0xCB},
{0x1F,0x9D,0x45,0xF1},
{0xAC,0xFA,0x58,0xAB},
{0x4B,0xE3,0x3,0x93},
{0x20,0x30,0xFA,0x55},
{0xAD,0x76,0x6D,0xF6},
{0x88,0xCC,0x76,0x91},
{0xF5,0x2,0x4C,0x25},
{0x4F,0xE5,0xD7,0xFC},
{0xC5,0x2A,0xCB,0xD7},
{0x26,0x35,0x44,0x80},
{0xB5,0x62,0xA3,0x8F},
{0xDE,0xB1,0x5A,0x49},
{0x25,0xBA,0x1B,0x67},
{0x45,0xEA,0xE,0x98},
{0x5D,0xFE,0xC0,0xE1},
{0xC3,0x2F,0x75,0x2},
{0x81,0x4C,0xF0,0x12},
{0x8D,0x46,0x97,0xA3},
{0x6B,0xD3,0xF9,0xC6},
{0x3,0x8F,0x5F,0xE7},
{0x15,0x92,0x9C,0x95},
{0xBF,0x6D,0x7A,0xEB},
{0x95,0x52,0x59,0xDA},
{0xD4,0xBE,0x83,0x2D},
{0x58,0x74,0x21,0xD3},
{0x49,0xE0,0x69,0x29},
{0x8E,0xC9,0xC8,0x44},
{0x75,0xC2,0x89,0x6A},
{0xF4,0x8E,0x79,0x78},
{0x99,0x58,0x3E,0x6B},
{0x27,0xB9,0x71,0xDD},
{0xBE,0xE1,0x4F,0xB6},
{0xF0,0x88,0xAD,0x17},
{0xC9,0x20,0xAC,0x66},
{0x7D,0xCE,0x3A,0xB4},
{0x63,0xDF,0x4A,0x18},
{0xE5,0x1A,0x31,0x82},
{0x97,0x51,0x33,0x60},
{0x62,0x53,0x7F,0x45},
{0xB1,0x64,0x77,0xE0},
{0xBB,0x6B,0xAE,0x84},
{0xFE,0x81,0xA0,0x1C},
{0xF9,0x8,0x2B,0x94},
{0x70,0x48,0x68,0x58},
{0x8F,0x45,0xFD,0x19},
{0x94,0xDE,0x6C,0x87},
{0x52,0x7B,0xF8,0xB7},
{0xAB,0x73,0xD3,0x23},
{0x72,0x4B,0x2,0xE2},
{0xE3,0x1F,0x8F,0x57},
{0x66,0x55,0xAB,0x2A},
{0xB2,0xEB,0x28,0x7},
{0x2F,0xB5,0xC2,0x3},
{0x86,0xC5,0x7B,0x9A},
{0xD3,0x37,0x8,0xA5},
{0x30,0x28,0x87,0xF2},
{0x23,0xBF,0xA5,0xB2},
{0x2,0x3,0x6A,0xBA},
{0xED,0x16,0x82,0x5C},
{0x8A,0xCF,0x1C,0x2B},
{0xA7,0x79,0xB4,0x92},
{0xF3,0x7,0xF2,0xF0},
{0x4E,0x69,0xE2,0xA1},
{0x65,0xDA,0xF4,0xCD},
{0x6,0x5,0xBE,0xD5},
{0xD1,0x34,0x62,0x1F},
{0xC4,0xA6,0xFE,0x8A},
{0x34,0x2E,0x53,0x9D},
{0xA2,0xF3,0x55,0xA0},
{0x5,0x8A,0xE1,0x32},
{0xA4,0xF6,0xEB,0x75},
{0xB,0x83,0xEC,0x39},
{0x40,0x60,0xEF,0xAA},
{0x5E,0x71,0x9F,0x6},
{0xBD,0x6E,0x10,0x51},
{0x3E,0x21,0x8A,0xF9},
{0x96,0xDD,0x6,0x3D},
{0xDD,0x3E,0x5,0xAE},
{0x4D,0xE6,0xBD,0x46},
{0x91,0x54,0x8D,0xB5},
{0x71,0xC4,0x5D,0x5},
{0x4,0x6,0xD4,0x6F},
{0x60,0x50,0x15,0xFF},
{0x19,0x98,0xFB,0x24},
{0xD6,0xBD,0xE9,0x97},
{0x89,0x40,0x43,0xCC},
{0x67,0xD9,0x9E,0x77},
{0xB0,0xE8,0x42,0xBD},
{0x7,0x89,0x8B,0x88},
{0xE7,0x19,0x5B,0x38},
{0x79,0xC8,0xEE,0xDB},
{0xA1,0x7C,0xA,0x47},
{0x7C,0x42,0xF,0xE9},
{0xF8,0x84,0x1E,0xC9},
{0x0,0x0,0x0,0x0},
{0x9,0x80,0x86,0x83},
{0x32,0x2B,0xED,0x48},
{0x1E,0x11,0x70,0xAC},
{0x6C,0x5A,0x72,0x4E},
{0xFD,0xE,0xFF,0xFB},
{0xF,0x85,0x38,0x56},
{0x3D,0xAE,0xD5,0x1E},
{0x36,0x2D,0x39,0x27},
{0xA,0xF,0xD9,0x64},
{0x68,0x5C,0xA6,0x21},
{0x9B,0x5B,0x54,0xD1},
{0x24,0x36,0x2E,0x3A},
{0xC,0xA,0x67,0xB1},
{0x93,0x57,0xE7,0xF},
{0xB4,0xEE,0x96,0xD2},
{0x1B,0x9B,0x91,0x9E},
{0x80,0xC0,0xC5,0x4F},
{0x61,0xDC,0x20,0xA2},
{0x5A,0x77,0x4B,0x69},
{0x1C,0x12,0x1A,0x16},
{0xE2,0x93,0xBA,0xA},
{0xC0,0xA0,0x2A,0xE5},
{0x3C,0x22,0xE0,0x43},
{0x12,0x1B,0x17,0x1D},
{0xE,0x9,0xD,0xB},
{0xF2,0x8B,0xC7,0xAD},
{0x2D,0xB6,0xA8,0xB9},
{0x14,0x1E,0xA9,0xC8},
{0x57,0xF1,0x19,0x85},
{0xAF,0x75,0x7,0x4C},
{0xEE,0x99,0xDD,0xBB},
{0xA3,0x7F,0x60,0xFD},
{0xF7,0x1,0x26,0x9F},
{0x5C,0x72,0xF5,0xBC},
{0x44,0x66,0x3B,0xC5},
{0x5B,0xFB,0x7E,0x34},
{0x8B,0x43,0x29,0x76},
{0xCB,0x23,0xC6,0xDC},
{0xB6,0xED,0xFC,0x68},
{0xB8,0xE4,0xF1,0x63},
{0xD7,0x31,0xDC,0xCA},
{0x42,0x63,0x85,0x10},
{0x13,0x97,0x22,0x40},
{0x84,0xC6,0x11,0x20},
{0x85,0x4A,0x24,0x7D},
{0xD2,0xBB,0x3D,0xF8},
{0xAE,0xF9,0x32,0x11},
{0xC7,0x29,0xA1,0x6D},
{0x1D,0x9E,0x2F,0x4B},
{0xDC,0xB2,0x30,0xF3},
{0xD,0x86,0x52,0xEC},
{0x77,0xC1,0xE3,0xD0},
{0x2B,0xB3,0x16,0x6C},
{0xA9,0x70,0xB9,0x99},
{0x11,0x94,0x48,0xFA},
{0x47,0xE9,0x64,0x22},
{0xA8,0xFC,0x8C,0xC4},
{0xA0,0xF0,0x3F,0x1A},
{0x56,0x7D,0x2C,0xD8},
{0x22,0x33,0x90,0xEF},
{0x87,0x49,0x4E,0xC7},
{0xD9,0x38,0xD1,0xC1},
{0x8C,0xCA,0xA2,0xFE},
{0x98,0xD4,0xB,0x36},
{0xA6,0xF5,0x81,0xCF},
{0xA5,0x7A,0xDE,0x28},
{0xDA,0xB7,0x8E,0x26},
{0x3F,0xAD,0xBF,0xA4},
{0x2C,0x3A,0x9D,0xE4},
{0x50,0x78,0x92,0xD},
{0x6A,0x5F,0xCC,0x9B},
{0x54,0x7E,0x46,0x62},
{0xF6,0x8D,0x13,0xC2},
{0x90,0xD8,0xB8,0xE8},
{0x2E,0x39,0xF7,0x5E},
{0x82,0xC3,0xAF,0xF5},
{0x9F,0x5D,0x80,0xBE},
{0x69,0xD0,0x93,0x7C},
{0x6F,0xD5,0x2D,0xA9},
{0xCF,0x25,0x12,0xB3},
{0xC8,0xAC,0x99,0x3B},
{0x10,0x18,0x7D,0xA7},
{0xE8,0x9C,0x63,0x6E},
{0xDB,0x3B,0xBB,0x7B},
{0xCD,0x26,0x78,0x9},
{0x6E,0x59,0x18,0xF4},
{0xEC,0x9A,0xB7,0x1},
{0x83,0x4F,0x9A,0xA8},
{0xE6,0x95,0x6E,0x65},
{0xAA,0xFF,0xE6,0x7E},
{0x21,0xBC,0xCF,0x8},
{0xEF,0x15,0xE8,0xE6},
{0xBA,0xE7,0x9B,0xD9},
{0x4A,0x6F,0x36,0xCE},
{0xEA,0x9F,0x9,0xD4},
{0x29,0xB0,0x7C,0xD6},
{0x31,0xA4,0xB2,0xAF},
{0x2A,0x3F,0x23,0x31},
{0xC6,0xA5,0x94,0x30},
{0x35,0xA2,0x66,0xC0},
{0x74,0x4E,0xBC,0x37},
{0xFC,0x82,0xCA,0xA6},
{0xE0,0x90,0xD0,0xB0},
{0x33,0xA7,0xD8,0x15},
{0xF1,0x4,0x98,0x4A},
{0x41,0xEC,0xDA,0xF7},
{0x7F,0xCD,0x50,0xE},
{0x17,0x91,0xF6,0x2F},
{0x76,0x4D,0xD6,0x8D},
{0x43,0xEF,0xB0,0x4D},
{0xCC,0xAA,0x4D,0x54},
{0xE4,0x96,0x4,0xDF},
{0x9E,0xD1,0xB5,0xE3},
{0x4C,0x6A,0x88,0x1B},
{0xC1,0x2C,0x1F,0xB8},
{0x46,0x65,0x51,0x7F},
{0x9D,0x5E,0xEA,0x4},
{0x1,0x8C,0x35,0x5D},
{0xFA,0x87,0x74,0x73},
{0xFB,0xB,0x41,0x2E},
{0xB3,0x67,0x1D,0x5A},
{0x92,0xDB,0xD2,0x52},
{0xE9,0x10,0x56,0x33},
{0x6D,0xD6,0x47,0x13},
{0x9A,0xD7,0x61,0x8C},
{0x37,0xA1,0xC,0x7A},
{0x59,0xF8,0x14,0x8E},
{0xEB,0x13,0x3C,0x89},
{0xCE,0xA9,0x27,0xEE},
{0xB7,0x61,0xC9,0x35},
{0xE1,0x1C,0xE5,0xED},
{0x7A,0x47,0xB1,0x3C},
{0x9C,0xD2,0xDF,0x59},
{0x55,0xF2,0x73,0x3F},
{0x18,0x14,0xCE,0x79},
{0x73,0xC7,0x37,0xBF},
{0x53,0xF7,0xCD,0xEA},
{0x5F,0xFD,0xAA,0x5B},
{0xDF,0x3D,0x6F,0x14},
{0x78,0x44,0xDB,0x86},
{0xCA,0xAF,0xF3,0x81},
{0xB9,0x68,0xC4,0x3E},
{0x38,0x24,0x34,0x2C},
{0xC2,0xA3,0x40,0x5F},
{0x16,0x1D,0xC3,0x72},
{0xBC,0xE2,0x25,0xC},
{0x28,0x3C,0x49,0x8B},
{0xFF,0xD,0x95,0x41},
{0x39,0xA8,0x1,0x71},
{0x8,0xC,0xB3,0xDE},
{0xD8,0xB4,0xE4,0x9C},
{0x64,0x56,0xC1,0x90},
{0x7B,0xCB,0x84,0x61},
{0xD5,0x32,0xB6,0x70},
{0x48,0x6C,0x5C,0x74},
{0xD0,0xB8,0x57,0x42}
};
unsigned char lookTwoInverse[][4]={
{0x50,0x51,0xF4,0xA7},
{0x53,0x7E,0x41,0x65},
{0xC3,0x1A,0x17,0xA4},
{0x96,0x3A,0x27,0x5E},
{0xCB,0x3B,0xAB,0x6B},
{0xF1,0x1F,0x9D,0x45},
{0xAB,0xAC,0xFA,0x58},
{0x93,0x4B,0xE3,0x3},
{0x55,0x20,0x30,0xFA},
{0xF6,0xAD,0x76,0x6D},
{0x91,0x88,0xCC,0x76},
{0x25,0xF5,0x2,0x4C},
{0xFC,0x4F,0xE5,0xD7},
{0xD7,0xC5,0x2A,0xCB},
{0x80,0x26,0x35,0x44},
{0x8F,0xB5,0x62,0xA3},
{0x49,0xDE,0xB1,0x5A},
{0x67,0x25,0xBA,0x1B},
{0x98,0x45,0xEA,0xE},
{0xE1,0x5D,0xFE,0xC0},
{0x2,0xC3,0x2F,0x75},
{0x12,0x81,0x4C,0xF0},
{0xA3,0x8D,0x46,0x97},
{0xC6,0x6B,0xD3,0xF9},
{0xE7,0x3,0x8F,0x5F},
{0x95,0x15,0x92,0x9C},
{0xEB,0xBF,0x6D,0x7A},
{0xDA,0x95,0x52,0x59},
{0x2D,0xD4,0xBE,0x83},
{0xD3,0x58,0x74,0x21},
{0x29,0x49,0xE0,0x69},
{0x44,0x8E,0xC9,0xC8},
{0x6A,0x75,0xC2,0x89},
{0x78,0xF4,0x8E,0x79},
{0x6B,0x99,0x58,0x3E},
{0xDD,0x27,0xB9,0x71},
{0xB6,0xBE,0xE1,0x4F},
{0x17,0xF0,0x88,0xAD},
{0x66,0xC9,0x20,0xAC},
{0xB4,0x7D,0xCE,0x3A},
{0x18,0x63,0xDF,0x4A},
{0x82,0xE5,0x1A,0x31},
{0x60,0x97,0x51,0x33},
{0x45,0x62,0x53,0x7F},
{0xE0,0xB1,0x64,0x77},
{0x84,0xBB,0x6B,0xAE},
{0x1C,0xFE,0x81,0xA0},
{0x94,0xF9,0x8,0x2B},
{0x58,0x70,0x48,0x68},
{0x19,0x8F,0x45,0xFD},
{0x87,0x94,0xDE,0x6C},
{0xB7,0x52,0x7B,0xF8},
{0x23,0xAB,0x73,0xD3},
{0xE2,0x72,0x4B,0x2},
{0x57,0xE3,0x1F,0x8F},
{0x2A,0x66,0x55,0xAB},
{0x7,0xB2,0xEB,0x28},
{0x3,0x2F,0xB5,0xC2},
{0x9A,0x86,0xC5,0x7B},
{0xA5,0xD3,0x37,0x8},
{0xF2,0x30,0x28,0x87},
{0xB2,0x23,0xBF,0xA5},
{0xBA,0x2,0x3,0x6A},
{0x5C,0xED,0x16,0x82},
{0x2B,0x8A,0xCF,0x1C},
{0x92,0xA7,0x79,0xB4},
{0xF0,0xF3,0x7,0xF2},
{0xA1,0x4E,0x69,0xE2},
{0xCD,0x65,0xDA,0xF4},
{0xD5,0x6,0x5,0xBE},
{0x1F,0xD1,0x34,0x62},
{0x8A,0xC4,0xA6,0xFE},
{0x9D,0x34,0x2E,0x53},
{0xA0,0xA2,0xF3,0x55},
{0x32,0x5,0x8A,0xE1},
{0x75,0xA4,0xF6,0xEB},
{0x39,0xB,0x83,0xEC},
{0xAA,0x40,0x60,0xEF},
{0x6,0x5E,0x71,0x9F},
{0x51,0xBD,0x6E,0x10},
{0xF9,0x3E,0x21,0x8A},
{0x3D,0x96,0xDD,0x6},
{0xAE,0xDD,0x3E,0x5},
{0x46,0x4D,0xE6,0xBD},
{0xB5,0x91,0x54,0x8D},
{0x5,0x71,0xC4,0x5D},
{0x6F,0x4,0x6,0xD4},
{0xFF,0x60,0x50,0x15},
{0x24,0x19,0x98,0xFB},
{0x97,0xD6,0xBD,0xE9},
{0xCC,0x89,0x40,0x43},
{0x77,0x67,0xD9,0x9E},
{0xBD,0xB0,0xE8,0x42},
{0x88,0x7,0x89,0x8B},
{0x38,0xE7,0x19,0x5B},
{0xDB,0x79,0xC8,0xEE},
{0x47,0xA1,0x7C,0xA},
{0xE9,0x7C,0x42,0xF},
{0xC9,0xF8,0x84,0x1E},
{0x0,0x0,0x0,0x0},
{0x83,0x9,0x80,0x86},
{0x48,0x32,0x2B,0xED},
{0xAC,0x1E,0x11,0x70},
{0x4E,0x6C,0x5A,0x72},
{0xFB,0xFD,0xE,0xFF},
{0x56,0xF,0x85,0x38},
{0x1E,0x3D,0xAE,0xD5},
{0x27,0x36,0x2D,0x39},
{0x64,0xA,0xF,0xD9},
{0x21,0x68,0x5C,0xA6},
{0xD1,0x9B,0x5B,0x54},
{0x3A,0x24,0x36,0x2E},
{0xB1,0xC,0xA,0x67},
{0xF,0x93,0x57,0xE7},
{0xD2,0xB4,0xEE,0x96},
{0x9E,0x1B,0x9B,0x91},
{0x4F,0x80,0xC0,0xC5},
{0xA2,0x61,0xDC,0x20},
{0x69,0x5A,0x77,0x4B},
{0x16,0x1C,0x12,0x1A},
{0xA,0xE2,0x93,0xBA},
{0xE5,0xC0,0xA0,0x2A},
{0x43,0x3C,0x22,0xE0},
{0x1D,0x12,0x1B,0x17},
{0xB,0xE,0x9,0xD},
{0xAD,0xF2,0x8B,0xC7},
{0xB9,0x2D,0xB6,0xA8},
{0xC8,0x14,0x1E,0xA9},
{0x85,0x57,0xF1,0x19},
{0x4C,0xAF,0x75,0x7},
{0xBB,0xEE,0x99,0xDD},
{0xFD,0xA3,0x7F,0x60},
{0x9F,0xF7,0x1,0x26},
{0xBC,0x5C,0x72,0xF5},
{0xC5,0x44,0x66,0x3B},
{0x34,0x5B,0xFB,0x7E},
{0x76,0x8B,0x43,0x29},
{0xDC,0xCB,0x23,0xC6},
{0x68,0xB6,0xED,0xFC},
{0x63,0xB8,0xE4,0xF1},
{0xCA,0xD7,0x31,0xDC},
{0x10,0x42,0x63,0x85},
{0x40,0x13,0x97,0x22},
{0x20,0x84,0xC6,0x11},
{0x7D,0x85,0x4A,0x24},
{0xF8,0xD2,0xBB,0x3D},
{0x11,0xAE,0xF9,0x32},
{0x6D,0xC7,0x29,0xA1},
{0x4B,0x1D,0x9E,0x2F},
{0xF3,0xDC,0xB2,0x30},
{0xEC,0xD,0x86,0x52},
{0xD0,0x77,0xC1,0xE3},
{0x6C,0x2B,0xB3,0x16},
{0x99,0xA9,0x70,0xB9},
{0xFA,0x11,0x94,0x48},
{0x22,0x47,0xE9,0x64},
{0xC4,0xA8,0xFC,0x8C},
{0x1A,0xA0,0xF0,0x3F},
{0xD8,0x56,0x7D,0x2C},
{0xEF,0x22,0x33,0x90},
{0xC7,0x87,0x49,0x4E},
{0xC1,0xD9,0x38,0xD1},
{0xFE,0x8C,0xCA,0xA2},
{0x36,0x98,0xD4,0xB},
{0xCF,0xA6,0xF5,0x81},
{0x28,0xA5,0x7A,0xDE},
{0x26,0xDA,0xB7,0x8E},
{0xA4,0x3F,0xAD,0xBF},
{0xE4,0x2C,0x3A,0x9D},
{0xD,0x50,0x78,0x92},
{0x9B,0x6A,0x5F,0xCC},
{0x62,0x54,0x7E,0x46},
{0xC2,0xF6,0x8D,0x13},
{0xE8,0x90,0xD8,0xB8},
{0x5E,0x2E,0x39,0xF7},
{0xF5,0x82,0xC3,0xAF},
{0xBE,0x9F,0x5D,0x80},
{0x7C,0x69,0xD0,0x93},
{0xA9,0x6F,0xD5,0x2D},
{0xB3,0xCF,0x25,0x12},
{0x3B,0xC8,0xAC,0x99},
{0xA7,0x10,0x18,0x7D},
{0x6E,0xE8,0x9C,0x63},
{0x7B,0xDB,0x3B,0xBB},
{0x9,0xCD,0x26,0x78},
{0xF4,0x6E,0x59,0x18},
{0x1,0xEC,0x9A,0xB7},
{0xA8,0x83,0x4F,0x9A},
{0x65,0xE6,0x95,0x6E},
{0x7E,0xAA,0xFF,0xE6},
{0x8,0x21,0xBC,0xCF},
{0xE6,0xEF,0x15,0xE8},
{0xD9,0xBA,0xE7,0x9B},
{0xCE,0x4A,0x6F,0x36},
{0xD4,0xEA,0x9F,0x9},
{0xD6,0x29,0xB0,0x7C},
{0xAF,0x31,0xA4,0xB2},
{0x31,0x2A,0x3F,0x23},
{0x30,0xC6,0xA5,0x94},
{0xC0,0x35,0xA2,0x66},
{0x37,0x74,0x4E,0xBC},
{0xA6,0xFC,0x82,0xCA},
{0xB0,0xE0,0x90,0xD0},
{0x15,0x33,0xA7,0xD8},
{0x4A,0xF1,0x4,0x98},
{0xF7,0x41,0xEC,0xDA},
{0xE,0x7F,0xCD,0x50},
{0x2F,0x17,0x91,0xF6},
{0x8D,0x76,0x4D,0xD6},
{0x4D,0x43,0xEF,0xB0},
{0x54,0xCC,0xAA,0x4D},
{0xDF,0xE4,0x96,0x4},
{0xE3,0x9E,0xD1,0xB5},
{0x1B,0x4C,0x6A,0x88},
{0xB8,0xC1,0x2C,0x1F},
{0x7F,0x46,0x65,0x51},
{0x4,0x9D,0x5E,0xEA},
{0x5D,0x1,0x8C,0x35},
{0x73,0xFA,0x87,0x74},
{0x2E,0xFB,0xB,0x41},
{0x5A,0xB3,0x67,0x1D},
{0x52,0x92,0xDB,0xD2},
{0x33,0xE9,0x10,0x56},
{0x13,0x6D,0xD6,0x47},
{0x8C,0x9A,0xD7,0x61},
{0x7A,0x37,0xA1,0xC},
{0x8E,0x59,0xF8,0x14},
{0x89,0xEB,0x13,0x3C},
{0xEE,0xCE,0xA9,0x27},
{0x35,0xB7,0x61,0xC9},
{0xED,0xE1,0x1C,0xE5},
{0x3C,0x7A,0x47,0xB1},
{0x59,0x9C,0xD2,0xDF},
{0x3F,0x55,0xF2,0x73},
{0x79,0x18,0x14,0xCE},
{0xBF,0x73,0xC7,0x37},
{0xEA,0x53,0xF7,0xCD},
{0x5B,0x5F,0xFD,0xAA},
{0x14,0xDF,0x3D,0x6F},
{0x86,0x78,0x44,0xDB},
{0x81,0xCA,0xAF,0xF3},
{0x3E,0xB9,0x68,0xC4},
{0x2C,0x38,0x24,0x34},
{0x5F,0xC2,0xA3,0x40},
{0x72,0x16,0x1D,0xC3},
{0xC,0xBC,0xE2,0x25},
{0x8B,0x28,0x3C,0x49},
{0x41,0xFF,0xD,0x95},
{0x71,0x39,0xA8,0x1},
{0xDE,0x8,0xC,0xB3},
{0x9C,0xD8,0xB4,0xE4},
{0x90,0x64,0x56,0xC1},
{0x61,0x7B,0xCB,0x84},
{0x70,0xD5,0x32,0xB6},
{0x74,0x48,0x6C,0x5C},
{0x42,0xD0,0xB8,0x57}
};
unsigned char lookThreeInverse[][4]={
{0xA7,0x50,0x51,0xF4},
{0x65,0x53,0x7E,0x41},
{0xA4,0xC3,0x1A,0x17},
{0x5E,0x96,0x3A,0x27},
{0x6B,0xCB,0x3B,0xAB},
{0x45,0xF1,0x1F,0x9D},
{0x58,0xAB,0xAC,0xFA},
{0x3,0x93,0x4B,0xE3},
{0xFA,0x55,0x20,0x30},
{0x6D,0xF6,0xAD,0x76},
{0x76,0x91,0x88,0xCC},
{0x4C,0x25,0xF5,0x2},
{0xD7,0xFC,0x4F,0xE5},
{0xCB,0xD7,0xC5,0x2A},
{0x44,0x80,0x26,0x35},
{0xA3,0x8F,0xB5,0x62},
{0x5A,0x49,0xDE,0xB1},
{0x1B,0x67,0x25,0xBA},
{0xE,0x98,0x45,0xEA},
{0xC0,0xE1,0x5D,0xFE},
{0x75,0x2,0xC3,0x2F},
{0xF0,0x12,0x81,0x4C},
{0x97,0xA3,0x8D,0x46},
{0xF9,0xC6,0x6B,0xD3},
{0x5F,0xE7,0x3,0x8F},
{0x9C,0x95,0x15,0x92},
{0x7A,0xEB,0xBF,0x6D},
{0x59,0xDA,0x95,0x52},
{0x83,0x2D,0xD4,0xBE},
{0x21,0xD3,0x58,0x74},
{0x69,0x29,0x49,0xE0},
{0xC8,0x44,0x8E,0xC9},
{0x89,0x6A,0x75,0xC2},
{0x79,0x78,0xF4,0x8E},
{0x3E,0x6B,0x99,0x58},
{0x71,0xDD,0x27,0xB9},
{0x4F,0xB6,0xBE,0xE1},
{0xAD,0x17,0xF0,0x88},
{0xAC,0x66,0xC9,0x20},
{0x3A,0xB4,0x7D,0xCE},
{0x4A,0x18,0x63,0xDF},
{0x31,0x82,0xE5,0x1A},
{0x33,0x60,0x97,0x51},
{0x7F,0x45,0x62,0x53},
{0x77,0xE0,0xB1,0x64},
{0xAE,0x84,0xBB,0x6B},
{0xA0,0x1C,0xFE,0x81},
{0x2B,0x94,0xF9,0x8},
{0x68,0x58,0x70,0x48},
{0xFD,0x19,0x8F,0x45},
{0x6C,0x87,0x94,0xDE},
{0xF8,0xB7,0x52,0x7B},
{0xD3,0x23,0xAB,0x73},
{0x2,0xE2,0x72,0x4B},
{0x8F,0x57,0xE3,0x1F},
{0xAB,0x2A,0x66,0x55},
{0x28,0x7,0xB2,0xEB},
{0xC2,0x3,0x2F,0xB5},
{0x7B,0x9A,0x86,0xC5},
{0x8,0xA5,0xD3,0x37},
{0x87,0xF2,0x30,0x28},
{0xA5,0xB2,0x23,0xBF},
{0x6A,0xBA,0x2,0x3},
{0x82,0x5C,0xED,0x16},
{0x1C,0x2B,0x8A,0xCF},
{0xB4,0x92,0xA7,0x79},
{0xF2,0xF0,0xF3,0x7},
{0xE2,0xA1,0x4E,0x69},
{0xF4,0xCD,0x65,0xDA},
{0xBE,0xD5,0x6,0x5},
{0x62,0x1F,0xD1,0x34},
{0xFE,0x8A,0xC4,0xA6},
{0x53,0x9D,0x34,0x2E},
{0x55,0xA0,0xA2,0xF3},
{0xE1,0x32,0x5,0x8A},
{0xEB,0x75,0xA4,0xF6},
{0xEC,0x39,0xB,0x83},
{0xEF,0xAA,0x40,0x60},
{0x9F,0x6,0x5E,0x71},
{0x10,0x51,0xBD,0x6E},
{0x8A,0xF9,0x3E,0x21},
{0x6,0x3D,0x96,0xDD},
{0x5,0xAE,0xDD,0x3E},
{0xBD,0x46,0x4D,0xE6},
{0x8D,0xB5,0x91,0x54},
{0x5D,0x5,0x71,0xC4},
{0xD4,0x6F,0x4,0x6},
{0x15,0xFF,0x60,0x50},
{0xFB,0x24,0x19,0x98},
{0xE9,0x97,0xD6,0xBD},
{0x43,0xCC,0x89,0x40},
{0x9E,0x77,0x67,0xD9},
{0x42,0xBD,0xB0,0xE8},
{0x8B,0x88,0x7,0x89},
{0x5B,0x38,0xE7,0x19},
{0xEE,0xDB,0x79,0xC8},
{0xA,0x47,0xA1,0x7C},
{0xF,0xE9,0x7C,0x42},
{0x1E,0xC9,0xF8,0x84},
{0x0,0x0,0x0,0x0},
{0x86,0x83,0x9,0x80},
{0xED,0x48,0x32,0x2B},
{0x70,0xAC,0x1E,0x11},
{0x72,0x4E,0x6C,0x5A},
{0xFF,0xFB,0xFD,0xE},
{0x38,0x56,0xF,0x85},
{0xD5,0x1E,0x3D,0xAE},
{0x39,0x27,0x36,0x2D},
{0xD9,0x64,0xA,0xF},
{0xA6,0x21,0x68,0x5C},
{0x54,0xD1,0x9B,0x5B},
{0x2E,0x3A,0x24,0x36},
{0x67,0xB1,0xC,0xA},
{0xE7,0xF,0x93,0x57},
{0x96,0xD2,0xB4,0xEE},
{0x91,0x9E,0x1B,0x9B},
{0xC5,0x4F,0x80,0xC0},
{0x20,0xA2,0x61,0xDC},
{0x4B,0x69,0x5A,0x77},
{0x1A,0x16,0x1C,0x12},
{0xBA,0xA,0xE2,0x93},
{0x2A,0xE5,0xC0,0xA0},
{0xE0,0x43,0x3C,0x22},
{0x17,0x1D,0x12,0x1B},
{0xD,0xB,0xE,0x9},
{0xC7,0xAD,0xF2,0x8B},
{0xA8,0xB9,0x2D,0xB6},
{0xA9,0xC8,0x14,0x1E},
{0x19,0x85,0x57,0xF1},
{0x7,0x4C,0xAF,0x75},
{0xDD,0xBB,0xEE,0x99},
{0x60,0xFD,0xA3,0x7F},
{0x26,0x9F,0xF7,0x1},
{0xF5,0xBC,0x5C,0x72},
{0x3B,0xC5,0x44,0x66},
{0x7E,0x34,0x5B,0xFB},
{0x29,0x76,0x8B,0x43},
{0xC6,0xDC,0xCB,0x23},
{0xFC,0x68,0xB6,0xED},
{0xF1,0x63,0xB8,0xE4},
{0xDC,0xCA,0xD7,0x31},
{0x85,0x10,0x42,0x63},
{0x22,0x40,0x13,0x97},
{0x11,0x20,0x84,0xC6},
{0x24,0x7D,0x85,0x4A},
{0x3D,0xF8,0xD2,0xBB},
{0x32,0x11,0xAE,0xF9},
{0xA1,0x6D,0xC7,0x29},
{0x2F,0x4B,0x1D,0x9E},
{0x30,0xF3,0xDC,0xB2},
{0x52,0xEC,0xD,0x86},
{0xE3,0xD0,0x77,0xC1},
{0x16,0x6C,0x2B,0xB3},
{0xB9,0x99,0xA9,0x70},
{0x48,0xFA,0x11,0x94},
{0x64,0x22,0x47,0xE9},
{0x8C,0xC4,0xA8,0xFC},
{0x3F,0x1A,0xA0,0xF0},
{0x2C,0xD8,0x56,0x7D},
{0x90,0xEF,0x22,0x33},
{0x4E,0xC7,0x87,0x49},
{0xD1,0xC1,0xD9,0x38},
{0xA2,0xFE,0x8C,0xCA},
{0xB,0x36,0x98,0xD4},
{0x81,0xCF,0xA6,0xF5},
{0xDE,0x28,0xA5,0x7A},
{0x8E,0x26,0xDA,0xB7},
{0xBF,0xA4,0x3F,0xAD},
{0x9D,0xE4,0x2C,0x3A},
{0x92,0xD,0x50,0x78},
{0xCC,0x9B,0x6A,0x5F},
{0x46,0x62,0x54,0x7E},
{0x13,0xC2,0xF6,0x8D},
{0xB8,0xE8,0x90,0xD8},
{0xF7,0x5E,0x2E,0x39},
{0xAF,0xF5,0x82,0xC3},
{0x80,0xBE,0x9F,0x5D},
{0x93,0x7C,0x69,0xD0},
{0x2D,0xA9,0x6F,0xD5},
{0x12,0xB3,0xCF,0x25},
{0x99,0x3B,0xC8,0xAC},
{0x7D,0xA7,0x10,0x18},
{0x63,0x6E,0xE8,0x9C},
{0xBB,0x7B,0xDB,0x3B},
{0x78,0x9,0xCD,0x26},
{0x18,0xF4,0x6E,0x59},
{0xB7,0x1,0xEC,0x9A},
{0x9A,0xA8,0x83,0x4F},
{0x6E,0x65,0xE6,0x95},
{0xE6,0x7E,0xAA,0xFF},
{0xCF,0x8,0x21,0xBC},
{0xE8,0xE6,0xEF,0x15},
{0x9B,0xD9,0xBA,0xE7},
{0x36,0xCE,0x4A,0x6F},
{0x9,0xD4,0xEA,0x9F},
{0x7C,0xD6,0x29,0xB0},
{0xB2,0xAF,0x31,0xA4},
{0x23,0x31,0x2A,0x3F},
{0x94,0x30,0xC6,0xA5},
{0x66,0xC0,0x35,0xA2},
{0xBC,0x37,0x74,0x4E},
{0xCA,0xA6,0xFC,0x82},
{0xD0,0xB0,0xE0,0x90},
{0xD8,0x15,0x33,0xA7},
{0x98,0x4A,0xF1,0x4},
{0xDA,0xF7,0x41,0xEC},
{0x50,0xE,0x7F,0xCD},
{0xF6,0x2F,0x17,0x91},
{0xD6,0x8D,0x76,0x4D},
{0xB0,0x4D,0x43,0xEF},
{0x4D,0x54,0xCC,0xAA},
{0x4,0xDF,0xE4,0x96},
{0xB5,0xE3,0x9E,0xD1},
{0x88,0x1B,0x4C,0x6A},
{0x1F,0xB8,0xC1,0x2C},
{0x51,0x7F,0x46,0x65},
{0xEA,0x4,0x9D,0x5E},
{0x35,0x5D,0x1,0x8C},
{0x74,0x73,0xFA,0x87},
{0x41,0x2E,0xFB,0xB},
{0x1D,0x5A,0xB3,0x67},
{0xD2,0x52,0x92,0xDB},
{0x56,0x33,0xE9,0x10},
{0x47,0x13,0x6D,0xD6},
{0x61,0x8C,0x9A,0xD7},
{0xC,0x7A,0x37,0xA1},
{0x14,0x8E,0x59,0xF8},
{0x3C,0x89,0xEB,0x13},
{0x27,0xEE,0xCE,0xA9},
{0xC9,0x35,0xB7,0x61},
{0xE5,0xED,0xE1,0x1C},
{0xB1,0x3C,0x7A,0x47},
{0xDF,0x59,0x9C,0xD2},
{0x73,0x3F,0x55,0xF2},
{0xCE,0x79,0x18,0x14},
{0x37,0xBF,0x73,0xC7},
{0xCD,0xEA,0x53,0xF7},
{0xAA,0x5B,0x5F,0xFD},
{0x6F,0x14,0xDF,0x3D},
{0xDB,0x86,0x78,0x44},
{0xF3,0x81,0xCA,0xAF},
{0xC4,0x3E,0xB9,0x68},
{0x34,0x2C,0x38,0x24},
{0x40,0x5F,0xC2,0xA3},
{0xC3,0x72,0x16,0x1D},
{0x25,0xC,0xBC,0xE2},
{0x49,0x8B,0x28,0x3C},
{0x95,0x41,0xFF,0xD},
{0x1,0x71,0x39,0xA8},
{0xB3,0xDE,0x8,0xC},
{0xE4,0x9C,0xD8,0xB4},
{0xC1,0x90,0x64,0x56},
{0x84,0x61,0x7B,0xCB},
{0xB6,0x70,0xD5,0x32},
{0x5C,0x74,0x48,0x6C},
{0x57,0x42,0xD0,0xB8}
};
unsigned char lookFourInverse[][4]={
{0xF4,0xA7,0x50,0x51},
{0x41,0x65,0x53,0x7E},
{0x17,0xA4,0xC3,0x1A},
{0x27,0x5E,0x96,0x3A},
{0xAB,0x6B,0xCB,0x3B},
{0x9D,0x45,0xF1,0x1F},
{0xFA,0x58,0xAB,0xAC},
{0xE3,0x3,0x93,0x4B},
{0x30,0xFA,0x55,0x20},
{0x76,0x6D,0xF6,0xAD},
{0xCC,0x76,0x91,0x88},
{0x2,0x4C,0x25,0xF5},
{0xE5,0xD7,0xFC,0x4F},
{0x2A,0xCB,0xD7,0xC5},
{0x35,0x44,0x80,0x26},
{0x62,0xA3,0x8F,0xB5},
{0xB1,0x5A,0x49,0xDE},
{0xBA,0x1B,0x67,0x25},
{0xEA,0xE,0x98,0x45},
{0xFE,0xC0,0xE1,0x5D},
{0x2F,0x75,0x2,0xC3},
{0x4C,0xF0,0x12,0x81},
{0x46,0x97,0xA3,0x8D},
{0xD3,0xF9,0xC6,0x6B},
{0x8F,0x5F,0xE7,0x3},
{0x92,0x9C,0x95,0x15},
{0x6D,0x7A,0xEB,0xBF},
{0x52,0x59,0xDA,0x95},
{0xBE,0x83,0x2D,0xD4},
{0x74,0x21,0xD3,0x58},
{0xE0,0x69,0x29,0x49},
{0xC9,0xC8,0x44,0x8E},
{0xC2,0x89,0x6A,0x75},
{0x8E,0x79,0x78,0xF4},
{0x58,0x3E,0x6B,0x99},
{0xB9,0x71,0xDD,0x27},
{0xE1,0x4F,0xB6,0xBE},
{0x88,0xAD,0x17,0xF0},
{0x20,0xAC,0x66,0xC9},
{0xCE,0x3A,0xB4,0x7D},
{0xDF,0x4A,0x18,0x63},
{0x1A,0x31,0x82,0xE5},
{0x51,0x33,0x60,0x97},
{0x53,0x7F,0x45,0x62},
{0x64,0x77,0xE0,0xB1},
{0x6B,0xAE,0x84,0xBB},
{0x81,0xA0,0x1C,0xFE},
{0x8,0x2B,0x94,0xF9},
{0x48,0x68,0x58,0x70},
{0x45,0xFD,0x19,0x8F},
{0xDE,0x6C,0x87,0x94},
{0x7B,0xF8,0xB7,0x52},
{0x73,0xD3,0x23,0xAB},
{0x4B,0x2,0xE2,0x72},
{0x1F,0x8F,0x57,0xE3},
{0x55,0xAB,0x2A,0x66},
{0xEB,0x28,0x7,0xB2},
{0xB5,0xC2,0x3,0x2F},
{0xC5,0x7B,0x9A,0x86},
{0x37,0x8,0xA5,0xD3},
{0x28,0x87,0xF2,0x30},
{0xBF,0xA5,0xB2,0x23},
{0x3,0x6A,0xBA,0x2},
{0x16,0x82,0x5C,0xED},
{0xCF,0x1C,0x2B,0x8A},
{0x79,0xB4,0x92,0xA7},
{0x7,0xF2,0xF0,0xF3},
{0x69,0xE2,0xA1,0x4E},
{0xDA,0xF4,0xCD,0x65},
{0x5,0xBE,0xD5,0x6},
{0x34,0x62,0x1F,0xD1},
{0xA6,0xFE,0x8A,0xC4},
{0x2E,0x53,0x9D,0x34},
{0xF3,0x55,0xA0,0xA2},
{0x8A,0xE1,0x32,0x5},
{0xF6,0xEB,0x75,0xA4},
{0x83,0xEC,0x39,0xB},
{0x60,0xEF,0xAA,0x40},
{0x71,0x9F,0x6,0x5E},
{0x6E,0x10,0x51,0xBD},
{0x21,0x8A,0xF9,0x3E},
{0xDD,0x6,0x3D,0x96},
{0x3E,0x5,0xAE,0xDD},
{0xE6,0xBD,0x46,0x4D},
{0x54,0x8D,0xB5,0x91},
{0xC4,0x5D,0x5,0x71},
{0x6,0xD4,0x6F,0x4},
{0x50,0x15,0xFF,0x60},
{0x98,0xFB,0x24,0x19},
{0xBD,0xE9,0x97,0xD6},
{0x40,0x43,0xCC,0x89},
{0xD9,0x9E,0x77,0x67},
{0xE8,0x42,0xBD,0xB0},
{0x89,0x8B,0x88,0x7},
{0x19,0x5B,0x38,0xE7},
{0xC8,0xEE,0xDB,0x79},
{0x7C,0xA,0x47,0xA1},
{0x42,0xF,0xE9,0x7C},
{0x84,0x1E,0xC9,0xF8},
{0x0,0x0,0x0,0x0},
{0x80,0x86,0x83,0x9},
{0x2B,0xED,0x48,0x32},
{0x11,0x70,0xAC,0x1E},
{0x5A,0x72,0x4E,0x6C},
{0xE,0xFF,0xFB,0xFD},
{0x85,0x38,0x56,0xF},
{0xAE,0xD5,0x1E,0x3D},
{0x2D,0x39,0x27,0x36},
{0xF,0xD9,0x64,0xA},
{0x5C,0xA6,0x21,0x68},
{0x5B,0x54,0xD1,0x9B},
{0x36,0x2E,0x3A,0x24},
{0xA,0x67,0xB1,0xC},
{0x57,0xE7,0xF,0x93},
{0xEE,0x96,0xD2,0xB4},
{0x9B,0x91,0x9E,0x1B},
{0xC0,0xC5,0x4F,0x80},
{0xDC,0x20,0xA2,0x61},
{0x77,0x4B,0x69,0x5A},
{0x12,0x1A,0x16,0x1C},
{0x93,0xBA,0xA,0xE2},
{0xA0,0x2A,0xE5,0xC0},
{0x22,0xE0,0x43,0x3C},
{0x1B,0x17,0x1D,0x12},
{0x9,0xD,0xB,0xE},
{0x8B,0xC7,0xAD,0xF2},
{0xB6,0xA8,0xB9,0x2D},
{0x1E,0xA9,0xC8,0x14},
{0xF1,0x19,0x85,0x57},
{0x75,0x7,0x4C,0xAF},
{0x99,0xDD,0xBB,0xEE},
{0x7F,0x60,0xFD,0xA3},
{0x1,0x26,0x9F,0xF7},
{0x72,0xF5,0xBC,0x5C},
{0x66,0x3B,0xC5,0x44},
{0xFB,0x7E,0x34,0x5B},
{0x43,0x29,0x76,0x8B},
{0x23,0xC6,0xDC,0xCB},
{0xED,0xFC,0x68,0xB6},
{0xE4,0xF1,0x63,0xB8},
{0x31,0xDC,0xCA,0xD7},
{0x63,0x85,0x10,0x42},
{0x97,0x22,0x40,0x13},
{0xC6,0x11,0x20,0x84},
{0x4A,0x24,0x7D,0x85},
{0xBB,0x3D,0xF8,0xD2},
{0xF9,0x32,0x11,0xAE},
{0x29,0xA1,0x6D,0xC7},
{0x9E,0x2F,0x4B,0x1D},
{0xB2,0x30,0xF3,0xDC},
{0x86,0x52,0xEC,0xD},
{0xC1,0xE3,0xD0,0x77},
{0xB3,0x16,0x6C,0x2B},
{0x70,0xB9,0x99,0xA9},
{0x94,0x48,0xFA,0x11},
{0xE9,0x64,0x22,0x47},
{0xFC,0x8C,0xC4,0xA8},
{0xF0,0x3F,0x1A,0xA0},
{0x7D,0x2C,0xD8,0x56},
{0x33,0x90,0xEF,0x22},
{0x49,0x4E,0xC7,0x87},
{0x38,0xD1,0xC1,0xD9},
{0xCA,0xA2,0xFE,0x8C},
{0xD4,0xB,0x36,0x98},
{0xF5,0x81,0xCF,0xA6},
{0x7A,0xDE,0x28,0xA5},
{0xB7,0x8E,0x26,0xDA},
{0xAD,0xBF,0xA4,0x3F},
{0x3A,0x9D,0xE4,0x2C},
{0x78,0x92,0xD,0x50},
{0x5F,0xCC,0x9B,0x6A},
{0x7E,0x46,0x62,0x54},
{0x8D,0x13,0xC2,0xF6},
{0xD8,0xB8,0xE8,0x90},
{0x39,0xF7,0x5E,0x2E},
{0xC3,0xAF,0xF5,0x82},
{0x5D,0x80,0xBE,0x9F},
{0xD0,0x93,0x7C,0x69},
{0xD5,0x2D,0xA9,0x6F},
{0x25,0x12,0xB3,0xCF},
{0xAC,0x99,0x3B,0xC8},
{0x18,0x7D,0xA7,0x10},
{0x9C,0x63,0x6E,0xE8},
{0x3B,0xBB,0x7B,0xDB},
{0x26,0x78,0x9,0xCD},
{0x59,0x18,0xF4,0x6E},
{0x9A,0xB7,0x1,0xEC},
{0x4F,0x9A,0xA8,0x83},
{0x95,0x6E,0x65,0xE6},
{0xFF,0xE6,0x7E,0xAA},
{0xBC,0xCF,0x8,0x21},
{0x15,0xE8,0xE6,0xEF},
{0xE7,0x9B,0xD9,0xBA},
{0x6F,0x36,0xCE,0x4A},
{0x9F,0x9,0xD4,0xEA},
{0xB0,0x7C,0xD6,0x29},
{0xA4,0xB2,0xAF,0x31},
{0x3F,0x23,0x31,0x2A},
{0xA5,0x94,0x30,0xC6},
{0xA2,0x66,0xC0,0x35},
{0x4E,0xBC,0x37,0x74},
{0x82,0xCA,0xA6,0xFC},
{0x90,0xD0,0xB0,0xE0},
{0xA7,0xD8,0x15,0x33},
{0x4,0x98,0x4A,0xF1},
{0xEC,0xDA,0xF7,0x41},
{0xCD,0x50,0xE,0x7F},
{0x91,0xF6,0x2F,0x17},
{0x4D,0xD6,0x8D,0x76},
{0xEF,0xB0,0x4D,0x43},
{0xAA,0x4D,0x54,0xCC},
{0x96,0x4,0xDF,0xE4},
{0xD1,0xB5,0xE3,0x9E},
{0x6A,0x88,0x1B,0x4C},
{0x2C,0x1F,0xB8,0xC1},
{0x65,0x51,0x7F,0x46},
{0x5E,0xEA,0x4,0x9D},
{0x8C,0x35,0x5D,0x1},
{0x87,0x74,0x73,0xFA},
{0xB,0x41,0x2E,0xFB},
{0x67,0x1D,0x5A,0xB3},
{0xDB,0xD2,0x52,0x92},
{0x10,0x56,0x33,0xE9},
{0xD6,0x47,0x13,0x6D},
{0xD7,0x61,0x8C,0x9A},
{0xA1,0xC,0x7A,0x37},
{0xF8,0x14,0x8E,0x59},
{0x13,0x3C,0x89,0xEB},
{0xA9,0x27,0xEE,0xCE},
{0x61,0xC9,0x35,0xB7},
{0x1C,0xE5,0xED,0xE1},
{0x47,0xB1,0x3C,0x7A},
{0xD2,0xDF,0x59,0x9C},
{0xF2,0x73,0x3F,0x55},
{0x14,0xCE,0x79,0x18},
{0xC7,0x37,0xBF,0x73},
{0xF7,0xCD,0xEA,0x53},
{0xFD,0xAA,0x5B,0x5F},
{0x3D,0x6F,0x14,0xDF},
{0x44,0xDB,0x86,0x78},
{0xAF,0xF3,0x81,0xCA},
{0x68,0xC4,0x3E,0xB9},
{0x24,0x34,0x2C,0x38},
{0xA3,0x40,0x5F,0xC2},
{0x1D,0xC3,0x72,0x16},
{0xE2,0x25,0xC,0xBC},
{0x3C,0x49,0x8B,0x28},
{0xD,0x95,0x41,0xFF},
{0xA8,0x1,0x71,0x39},
{0xC,0xB3,0xDE,0x8},
{0xB4,0xE4,0x9C,0xD8},
{0x56,0xC1,0x90,0x64},
{0xCB,0x84,0x61,0x7B},
{0x32,0xB6,0x70,0xD5},
{0x6C,0x5C,0x74,0x48},
{0xB8,0x57,0x42,0xD0}
};
void multi(unsigned char*input,unsigned char*result,unsigned char number)
{
	for(int i=0;i<256;i++)
	{
		int x=int(number);
		if(x==1)
		{
			result[i]=input[i];
		}
		if(x==2)
		{
			int temp=(int)input[i];
			int x=(0x80)&(temp);
			if(x==0)
			{
				result[i]=input[i]<<1;
			}
			else
			{
				result[i]=(input[i]<<1)^0x1b;
			}
		}
		else if(number==9)
		{
			unsigned char temp=input[i];
			for(int k=0;k<3;k++)
			{
				int x=(0x80)&((int)temp);
				if(x==0)
				{
					result[i]=temp<<1;
				}
				else
				{
					result[i]=(temp<<1)^0x1b;
				}
				temp = result[i];
			}
			result[i] = result[i] ^ input[i];
		}
		else if(number==11)
		{
			unsigned char temp=input[i];
			for(int k=0;k<3;k++)
			{
				int x=(0x80)&((int)temp);
				if(x==0)
				{
					result[i]=temp<<1;
				}
				else
				{
					result[i]=(temp<<1)^0x1b;
				}
				temp = result[i];
			}
			result[i] = result[i] ^ input[i];
			int x=(0x80)&((int)input[i]);
			if(x==0)
			{
				result[i]=result[i]^input[i]<<1;
			}
			else
			{
				result[i]=result[i]^((input[i]<<1)^0x1b);
			}
		}
		else if(number==13)
		{
			unsigned char temp=input[i];
			for(int k=0;k<3;k++)
			{
				int x=(0x80)&((int)temp);
				if(x==0)
				{
					result[i]=temp<<1;
				}
				else
				{
					result[i]=(temp<<1)^0x1b;
				}
				temp = result[i];
			}
			result[i] = result[i] ^ input[i];
			unsigned char temp2 = result[i];
			temp = input[i];
			for(int k=0;k<2;k++)
			{
				int x=(0x80)&((int)temp);
				if(x==0)
				{
					result[i]=temp<<1;
				}
				else
				{
					result[i]=(temp<<1)^0x1b;
				}
				temp = result[i];
			}
			result[i] = temp2 ^ result[i];
		}
		else if(number==14)
		{
			unsigned char temp=input[i];
			for(int k=0;k<3;k++)
			{
				int x=(0x80)&((int)temp);
				if(x==0)
				{
					result[i]=temp<<1;
				}
				else
				{
					result[i]=(temp<<1)^0x1b;
				}
				temp = result[i];
			}
			unsigned char temp2 = result[i];
			temp = input[i];
			for(int k=0;k<2;k++)
			{
				int x=(0x80)&((int)temp);
				if(x==0)
				{
					 result[i]=temp<<1;
				}
				else
				{
					result[i]=(temp<<1)^0x1b;
				}
				temp = result[i];
			}
			result[i] = temp2 ^ result[i];
			temp2 = result[i];
			int x=(0x80)&((int)input[i]);
			if(x==0)
			{
				result[i]=input[i]<<1;
			}
			else
			{
				result[i]=(input[i]<<1)^0x1b;
			}
			result[i] = temp2 ^ result[i];
		}
		else if(number==3)
		{
			int temp=(int)input[i];
			int x=(0x80)&(temp);
			if(x==0)
			{
				result[i]=input[i]<<1;
			}
			else
			{
				result[i]=(input[i]<<1)^0x1b;
			}
			result[i]=result[i]^(input[i]);
		}
	}
}
void multiTwoNumbers(unsigned char input,unsigned char*result,unsigned char number)
{
	int x=int(number);
	if(x==1)
	{
		*result=input;
	}
	if(x==2)
	{
		int temp=(int)input;
		int x=(0x80)&(temp);
		if(x==0)
		{
			(*result)=input<<1;
		}
		else
		{
			*result=(input<<1)^0x1b;
		}
	}
	else if(number==9)
	{
		unsigned char temp=input;
		for(int k=0;k<3;k++)
		{
			int x=(0x80)&((int)temp);
			if(x==0)
			{
				*result=temp<<1;
			}
			else
			{
				*result =(temp<<1)^0x1b;
			}
			temp = *result ;
		}
		*result = *result^ input;
	}
	else if(number==11)
	{
		unsigned char temp=input;
		for(int k=0;k<3;k++)
		{
			int x=(0x80)&((int)temp);
			if(x==0)
			{
				*result=temp<<1;
			}
			else
			{
				*result=(temp<<1)^0x1b;
			}
			temp = *result;
		}
		*result = *result^ input;
		int x=(0x80)&((int)input);
		if(x==0)
		{
			*result=*result^input<<1;
		}
		else
		{
			*result=*result^((input<<1)^0x1b);
		}
	}
	else if(number==13)
	{
		unsigned char temp=input;
		for(int k=0;k<3;k++)
		{
			int x=(0x80)&((int)temp);
			if(x==0)
			{
				*result=temp<<1;
			}
			else
			{
				*result=(temp<<1)^0x1b;
			}
			temp = *result;
		}
		*result= *result^ input;
		unsigned char temp2 = *result;
		temp = input;
		for(int k=0;k<2;k++)
		{
			int x=(0x80)&((int)temp);
			if(x==0)
			{
				*result=temp<<1;
			}
			else
			{
				*result=(temp<<1)^0x1b;
			}
			temp = *result;
		}
		*result = temp2 ^ *result;
	}
	else if(number==14)
	{
		unsigned char temp=input;
		for(int k=0;k<3;k++)
		{
			int x=(0x80)&((int)temp);
			if(x==0)
			{
				*result=temp<<1;
			}
			else
			{
				*result=(temp<<1)^0x1b;
			}
			temp = *result;
		}
		unsigned char temp2 = *result;
		temp = input;
		for(int k=0;k<2;k++)
		{
			int x=(0x80)&((int)temp);
			if(x==0)
			{
					*result=temp<<1;
			}
			else
			{
				*result=(temp<<1)^0x1b;
			}
			temp = *result;
		}
		*result= temp2 ^ *result;
		temp2 = *result;
		int x=(0x80)&((int)input);
		if(x==0)
		{
			*result=input<<1;
		}
		else
		{
			*result=(input<<1)^0x1b;
		}
		*result= temp2 ^ *result;
	}
	else if(number==3)
	{
		int temp=(int)input;
		int x=(0x80)&(temp);
		if(x==0)
		{
			*result=input<<1;
		}
		else
		{
			*result=(input<<1)^0x1b;
		}
		*result=*result^(input);
	}
}

void preCalculationsInEncryption()
{

	//generate S-Box multiplied by one,two,three and saving them in files
	/*
	unsigned char sBoxMultiBy1[256];
	unsigned char sBoxMultiBy2[256];
	unsigned char sBoxMultiBy3[256];
	FILE* sboxMultiBy1File= 0;
	FILE* sboxMultiBy2File=0;
	FILE* sboxMultiBy3File=0;
	sboxMultiBy1File = fopen("C:\\New folder\\sbox1.txt", "w");
	sboxMultiBy2File = fopen("C:\\New folder\\sbox2.txt", "w");
	sboxMultiBy3File = fopen("C:\\New folder\\sbox3.txt", "w");
	multi(SBoxMultiBy1,sBoxMultiBy1,0x01);
	multi(sBoxMultiBy1,sBoxMultiBy2,0x02);
	multi(sBoxMultiBy1,sBoxMultiBy3,0x03);

	fprintf(sboxMultiBy1File,"{\n");
	for (int i=0;i<256;i++)
		fprintf(sboxMultiBy1File,"0x%X,",sBoxMultiBy1[i]);
	fprintf(sboxMultiBy1File,"}\n");
	fclose(sboxMultiBy1File);
	fprintf(sboxMultiBy2File,"{\n");
	for (int i=0;i<256;i++)
		fprintf(sboxMultiBy2File,"0x%X,",sBoxMultiBy2[i]);
	fprintf(sboxMultiBy2File,"}\n");
	fclose(sboxMultiBy2File);
	fprintf(sboxMultiBy3File,"{\n");
	for (int i=0;i<256;i++)
		fprintf(sboxMultiBy3File,"0x%X,",sBoxMultiBy3[i]);
	fprintf(sboxMultiBy3File,"}\n");
	fclose(sboxMultiBy3File);

	//generating look up tables for encryption
	unsigned char L1[256][4];
	unsigned char L2[256][4];
	unsigned char L3[256][4];
	unsigned char L4[256][4];
	for(int i=0;i<256;i++)
	{
		L1[i][0]=sBoxMultiBy2[i];
		L1[i][1]=sBoxMultiBy1[i];
		L1[i][2]=sBoxMultiBy1[i];
		L1[i][3]=sBoxMultiBy3[i];
	}
	for(int i=0;i<256;i++)
	{
		L2[i][0]=sBoxMultiBy3[i];
		L2[i][1]=sBoxMultiBy2[i];
		L2[i][2]=sBoxMultiBy1[i];
		L2[i][3]=sBoxMultiBy1[i];
	}
	for(int i=0;i<256;i++)
	{
		L3[i][0]=sBoxMultiBy1[i];
		L3[i][1]=sBoxMultiBy3[i];
		L3[i][2]=sBoxMultiBy2[i];
		L3[i][3]=sBoxMultiBy1[i];
	}
	for(int i=0;i<256;i++)
	{
		L4[i][0]=sBoxMultiBy1[i];
		L4[i][1]=sBoxMultiBy1[i];
		L4[i][2]=sBoxMultiBy3[i];
		L4[i][3]=sBoxMultiBy2[i];
	}
	//saving look up tables in files
	FILE* lookUpOne_File = 0;
	lookUpOne_File = fopen("C:\\New folder\\lookOne.txt", "w");
	fprintf(lookUpOne_File,"{\n");
	for (int i=0;i<256;i++)
	  fprintf(lookUpOne_File,"{0x%X,0x%X,0x%X,0x%X},\n",L1[i][0],L1[i][1],L1[i][2],L1[i][3]);
	fprintf(lookUpOne_File,"}\n");
	fclose(lookUpOne_File);
	FILE* lookUpTwo_File = 0;
	lookUpTwo_File= fopen("C:\\New folder\\lookTwo.txt", "w");
	fprintf(lookUpTwo_File,"{\n");
	for (int i=0;i<256;i++)
	  fprintf(lookUpTwo_File,"{0x%X,0x%X,0x%X,0x%X},\n",L2[i][0],L2[i][1],L2[i][2],L2[i][3]);
	fprintf(lookUpTwo_File,"}\n");
	fclose(lookUpTwo_File);
	FILE* lookUpThree_File = 0;
	lookUpThree_File= fopen("C:\\New folder\\lookThree.txt", "w");
	fprintf(lookUpThree_File,"{\n");
	for (int i=0;i<256;i++)
	  fprintf(lookUpThree_File,"{0x%X,0x%X,0x%X,0x%X},\n",L3[i][0],L3[i][1],L3[i][2],L3[i][3]);
	fprintf(lookUpThree_File,"}\n");
	fclose(lookUpThree_File);
	FILE* lookUpFour_File = 0;
	lookUpFour_File= fopen("C:\\New folder\\lookFour.txt", "w");
	fprintf(lookUpFour_File,"{\n");
	for (int i=0;i<256;i++)
	  fprintf(lookUpFour_File,"{0x%X,0x%X,0x%X,0x%X},\n",L4[i][0],L4[i][1],L4[i][2],L4[i][3]);
	fprintf(lookUpFour_File,"}\n");
	fclose(lookUpFour_File);
	*/
	//generate inverse of S-Box multiplied by 0x09,0x0e,0x0d,0x0b and saving them in files
	/*
	unsigned char sBoxInverseMultiBy0x09[256];
	unsigned char sBoxInverseMultiBy0x0b[256];
	unsigned char sBoxInverseMultiBy0x0d[256];
	unsigned char sBoxInverseMultiBy0x0e[256];
	FILE* sBoxInverseMultiBy0x09File=0;
	FILE* sBoxInverseMultiBy0x0bFile=0;
	FILE* sBoxInverseMultiBy0x0dFile=0;
	FILE* sBoxInverseMultiBy0x0eFile=0;
	sBoxInverseMultiBy0x09File = fopen("C:\\New folder\\sBoxInverseMultiBy0x09.txt", "w");
	sBoxInverseMultiBy0x0bFile = fopen("C:\\New folder\\sBoxInverseMultiBy0x0b.txt", "w");
	sBoxInverseMultiBy0x0dFile = fopen("C:\\New folder\\sBoxInverseMultiBy0x0d.txt", "w");
	sBoxInverseMultiBy0x0eFile = fopen("C:\\New folder\\sBoxInverseMultiBy0x0e.txt", "w");

	multi(inverseOfSBox,sBoxInverseMultiBy0x09,0x09);
	multi(inverseOfSBox,sBoxInverseMultiBy0x0b,0x0b);
	multi(inverseOfSBox,sBoxInverseMultiBy0x0d,0x0d);
	multi(inverseOfSBox,sBoxInverseMultiBy0x0e,0x0e);

	fprintf(sBoxInverseMultiBy0x09File,"{\n");
	for (int i=0;i<256;i++)
		fprintf(sBoxInverseMultiBy0x09File,"0x%X,",sBoxInverseMultiBy0x09[i]);
	fprintf(sBoxInverseMultiBy0x09File,"}\n");
	fclose(sBoxInverseMultiBy0x09File);

	fprintf(sBoxInverseMultiBy0x0bFile,"{\n");
	for (int i=0;i<256;i++)
		fprintf(sBoxInverseMultiBy0x0bFile,"0x%X,",sBoxInverseMultiBy0x0b[i]);
	fprintf(sBoxInverseMultiBy0x0bFile,"}\n");
	fclose(sBoxInverseMultiBy0x0bFile);

	fprintf(sBoxInverseMultiBy0x0dFile,"{\n");
	for (int i=0;i<256;i++)
		fprintf(sBoxInverseMultiBy0x0dFile,"0x%X,",sBoxInverseMultiBy0x0d[i]);
	fprintf(sBoxInverseMultiBy0x0dFile,"}\n");
	fclose(sBoxInverseMultiBy0x0dFile);

	fprintf(sBoxInverseMultiBy0x0eFile,"{\n");
	for (int i=0;i<256;i++)
		fprintf(sBoxInverseMultiBy0x0eFile,"0x%X,",sBoxInverseMultiBy0x0e[i]);
	fprintf(sBoxInverseMultiBy0x0eFile,"}\n");
	fclose(sBoxInverseMultiBy0x0eFile);
	*/
	//generating look up tables for decryption
	/*
	unsigned char L1[256][4];
	unsigned char L2[256][4];
	unsigned char L3[256][4];
	unsigned char L4[256][4];


	for(int i=0;i<256;i++)
	{
		L1[i][0]=sBoxInverseMultiBy0x0e[i];
		L1[i][1]=sBoxInverseMultiBy0x09[i];
		L1[i][2]=sBoxInverseMultiBy0x0d[i];
		L1[i][3]=sBoxInverseMultiBy0x0b[i];
	}

	for(int i=0;i<256;i++)
	{
		L2[i][0]=sBoxInverseMultiBy0x0b[i];
		L2[i][1]=sBoxInverseMultiBy0x0e[i];
		L2[i][2]=sBoxInverseMultiBy0x09[i];
		L2[i][3]=sBoxInverseMultiBy0x0d[i];
	}



	for(int i=0;i<256;i++)
	{
		L3[i][0]=sBoxInverseMultiBy0x0d[i];
		L3[i][1]=sBoxInverseMultiBy0x0b[i];
		L3[i][2]=sBoxInverseMultiBy0x0e[i];
		L3[i][3]=sBoxInverseMultiBy0x09[i];
	}

	for(int i=0;i<256;i++)
	{
		L4[i][0]=sBoxInverseMultiBy0x09[i];
		L4[i][1]=sBoxInverseMultiBy0x0d[i];
		L4[i][2]=sBoxInverseMultiBy0x0b[i];
		L4[i][3]=sBoxInverseMultiBy0x0e[i];
	}
	//saving look up tables in files
	FILE* lookUpOne_File = 0;
	lookUpOne_File = fopen("C:\\New folder\\lookOneInverse.txt", "w");
	fprintf(lookUpOne_File,"{\n");
	for (int i=0;i<256;i++)
	  fprintf(lookUpOne_File,"{0x%X,0x%X,0x%X,0x%X},\n",L1[i][0],L1[i][1],L1[i][2],L1[i][3]);
	fprintf(lookUpOne_File,"}\n");
	fclose(lookUpOne_File);
	FILE* lookUpTwo_File = 0;
	lookUpTwo_File= fopen("C:\\New folder\\lookTwoInverse.txt", "w");
	fprintf(lookUpTwo_File,"{\n");
	for (int i=0;i<256;i++)
	  fprintf(lookUpTwo_File,"{0x%X,0x%X,0x%X,0x%X},\n",L2[i][0],L2[i][1],L2[i][2],L2[i][3]);
	fprintf(lookUpTwo_File,"}\n");
	fclose(lookUpTwo_File);
	FILE* lookUpThree_File = 0;
	lookUpThree_File= fopen("C:\\New folder\\lookThreeInverse.txt", "w");
	fprintf(lookUpThree_File,"{\n");
	for (int i=0;i<256;i++)
	  fprintf(lookUpThree_File,"{0x%X,0x%X,0x%X,0x%X},\n",L3[i][0],L3[i][1],L3[i][2],L3[i][3]);
	fprintf(lookUpThree_File,"}\n");
	fclose(lookUpThree_File);
	FILE* lookUpFour_File = 0;
	lookUpFour_File= fopen("C:\\New folder\\lookFourInverse.txt", "w");
	fprintf(lookUpFour_File,"{\n");
	for (int i=0;i<256;i++)
	  fprintf(lookUpFour_File,"{0x%X,0x%X,0x%X,0x%X},\n",L4[i][0],L4[i][1],L4[i][2],L4[i][3]);
	fprintf(lookUpFour_File,"}\n");
	fclose(lookUpFour_File);
	*/
}
void changeFromOneDimToTwoDim(unsigned char*p,unsigned char x[][4])
{
	for(int i=0;i<16;i++)
	{
		x[i%4][i/4]=p[i];
	}
}
void changeFromTwoDimToOneDim(unsigned char*p,unsigned char x[][4])
{
	for(int i=0;i<16;i++)
		p[i]=x[i%4][i/4];
}
void keyExpansion(unsigned char key[16], unsigned char expandedKey[44][4]) {

	unsigned char Rcon[10] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
			0x1B, 0x36 };

	for (int i = 0; i < 4; i++) {
		expandedKey[i][0] = key[4 * i];
		expandedKey[i][1] = key[4 * i + 1];
		expandedKey[i][2] = key[4 * i + 2];
		expandedKey[i][3] = key[4 * i + 3];
	}
	for (int j = 4; j < 44; j++) {
		if ((j % 4) == 0) {
			//RotWord
			expandedKey[j][0] = expandedKey[j - 1][1];
			expandedKey[j][1] = expandedKey[j - 1][2];
			expandedKey[j][2] = expandedKey[j - 1][3];
			expandedKey[j][3] = expandedKey[j - 1][0];

			//SubBytes from S-Box
			expandedKey[j][0] = SBoxMultiBy1[expandedKey[j][0]];
			expandedKey[j][1] = SBoxMultiBy1[expandedKey[j][1]];
			expandedKey[j][2] = SBoxMultiBy1[expandedKey[j][2]];
			expandedKey[j][3] = SBoxMultiBy1[expandedKey[j][3]];

			//XOR
			expandedKey[j][0] = expandedKey[j][0] ^ expandedKey[j - 4][0]
			                                                           ^ Rcon[(j / 4) - 1]; //why j/4?
			expandedKey[j][1] = expandedKey[j][1] ^ expandedKey[j - 4][1];
			expandedKey[j][2] = expandedKey[j][2] ^ expandedKey[j - 4][2];
			expandedKey[j][3] = expandedKey[j][3] ^ expandedKey[j - 4][3];
		} else {
			expandedKey[j][0] = expandedKey[j - 1][0] ^ expandedKey[j - 4][0];
			expandedKey[j][1] = expandedKey[j - 1][1] ^ expandedKey[j - 4][1];
			expandedKey[j][2] = expandedKey[j - 1][2] ^ expandedKey[j - 4][2];
			expandedKey[j][3] = expandedKey[j - 1][3] ^ expandedKey[j - 4][3];
		}
	}
}
unsigned char boxMultiBy0x09[256]={0x0,0x9,0x12,0x1B,0x24,0x2D,0x36,0x3F,0x48,0x41,0x5A,0x53,0x6C,0x65,0x7E,0x77,0x90,0x99,0x82,0x8B,0xB4,0xBD,0xA6,0xAF,0xD8,0xD1,0xCA,0xC3,0xFC,0xF5,0xEE,0xE7,0x3B,0x32,0x29,0x20,0x1F,0x16,0xD,0x4,0x73,0x7A,0x61,0x68,0x57,0x5E,0x45,0x4C,0xAB,0xA2,0xB9,0xB0,0x8F,0x86,0x9D,0x94,0xE3,0xEA,0xF1,0xF8,0xC7,0xCE,0xD5,0xDC,0x76,0x7F,0x64,0x6D,0x52,0x5B,0x40,0x49,0x3E,0x37,0x2C,0x25,0x1A,0x13,0x8,0x1,0xE6,0xEF,0xF4,0xFD,0xC2,0xCB,0xD0,0xD9,0xAE,0xA7,0xBC,0xB5,0x8A,0x83,0x98,0x91,0x4D,0x44,0x5F,0x56,0x69,0x60,0x7B,0x72,0x5,0xC,0x17,0x1E,0x21,0x28,0x33,0x3A,0xDD,0xD4,0xCF,0xC6,0xF9,0xF0,0xEB,0xE2,0x95,0x9C,0x87,0x8E,0xB1,0xB8,0xA3,0xAA,0xEC,0xE5,0xFE,0xF7,0xC8,0xC1,0xDA,0xD3,0xA4,0xAD,0xB6,0xBF,0x80,0x89,0x92,0x9B,0x7C,0x75,0x6E,0x67,0x58,0x51,0x4A,0x43,0x34,0x3D,0x26,0x2F,0x10,0x19,0x2,0xB,0xD7,0xDE,0xC5,0xCC,0xF3,0xFA,0xE1,0xE8,0x9F,0x96,0x8D,0x84,0xBB,0xB2,0xA9,0xA0,0x47,0x4E,0x55,0x5C,0x63,0x6A,0x71,0x78,0xF,0x6,0x1D,0x14,0x2B,0x22,0x39,0x30,0x9A,0x93,0x88,0x81,0xBE,0xB7,0xAC,0xA5,0xD2,0xDB,0xC0,0xC9,0xF6,0xFF,0xE4,0xED,0xA,0x3,0x18,0x11,0x2E,0x27,0x3C,0x35,0x42,0x4B,0x50,0x59,0x66,0x6F,0x74,0x7D,0xA1,0xA8,0xB3,0xBA,0x85,0x8C,0x97,0x9E,0xE9,0xE0,0xFB,0xF2,0xCD,0xC4,0xDF,0xD6,0x31,0x38,0x23,0x2A,0x15,0x1C,0x7,0xE,0x79,0x70,0x6B,0x62,0x5D,0x54,0x4F,0x46};
unsigned char boxMultiBy0x0b[256]={0x0,0xB,0x16,0x1D,0x2C,0x27,0x3A,0x31,0x58,0x53,0x4E,0x45,0x74,0x7F,0x62,0x69,0xB0,0xBB,0xA6,0xAD,0x9C,0x97,0x8A,0x81,0xE8,0xE3,0xFE,0xF5,0xC4,0xCF,0xD2,0xD9,0x7B,0x70,0x6D,0x66,0x57,0x5C,0x41,0x4A,0x23,0x28,0x35,0x3E,0xF,0x4,0x19,0x12,0xCB,0xC0,0xDD,0xD6,0xE7,0xEC,0xF1,0xFA,0x93,0x98,0x85,0x8E,0xBF,0xB4,0xA9,0xA2,0xF6,0xFD,0xE0,0xEB,0xDA,0xD1,0xCC,0xC7,0xAE,0xA5,0xB8,0xB3,0x82,0x89,0x94,0x9F,0x46,0x4D,0x50,0x5B,0x6A,0x61,0x7C,0x77,0x1E,0x15,0x8,0x3,0x32,0x39,0x24,0x2F,0x8D,0x86,0x9B,0x90,0xA1,0xAA,0xB7,0xBC,0xD5,0xDE,0xC3,0xC8,0xF9,0xF2,0xEF,0xE4,0x3D,0x36,0x2B,0x20,0x11,0x1A,0x7,0xC,0x65,0x6E,0x73,0x78,0x49,0x42,0x5F,0x54,0xF7,0xFC,0xE1,0xEA,0xDB,0xD0,0xCD,0xC6,0xAF,0xA4,0xB9,0xB2,0x83,0x88,0x95,0x9E,0x47,0x4C,0x51,0x5A,0x6B,0x60,0x7D,0x76,0x1F,0x14,0x9,0x2,0x33,0x38,0x25,0x2E,0x8C,0x87,0x9A,0x91,0xA0,0xAB,0xB6,0xBD,0xD4,0xDF,0xC2,0xC9,0xF8,0xF3,0xEE,0xE5,0x3C,0x37,0x2A,0x21,0x10,0x1B,0x6,0xD,0x64,0x6F,0x72,0x79,0x48,0x43,0x5E,0x55,0x1,0xA,0x17,0x1C,0x2D,0x26,0x3B,0x30,0x59,0x52,0x4F,0x44,0x75,0x7E,0x63,0x68,0xB1,0xBA,0xA7,0xAC,0x9D,0x96,0x8B,0x80,0xE9,0xE2,0xFF,0xF4,0xC5,0xCE,0xD3,0xD8,0x7A,0x71,0x6C,0x67,0x56,0x5D,0x40,0x4B,0x22,0x29,0x34,0x3F,0xE,0x5,0x18,0x13,0xCA,0xC1,0xDC,0xD7,0xE6,0xED,0xF0,0xFB,0x92,0x99,0x84,0x8F,0xBE,0xB5,0xA8,0xA3};
unsigned char boxMultiBy0x0d[256]={0x0,0xD,0x1A,0x17,0x34,0x39,0x2E,0x23,0x68,0x65,0x72,0x7F,0x5C,0x51,0x46,0x4B,0xD0,0xDD,0xCA,0xC7,0xE4,0xE9,0xFE,0xF3,0xB8,0xB5,0xA2,0xAF,0x8C,0x81,0x96,0x9B,0xBB,0xB6,0xA1,0xAC,0x8F,0x82,0x95,0x98,0xD3,0xDE,0xC9,0xC4,0xE7,0xEA,0xFD,0xF0,0x6B,0x66,0x71,0x7C,0x5F,0x52,0x45,0x48,0x3,0xE,0x19,0x14,0x37,0x3A,0x2D,0x20,0x6D,0x60,0x77,0x7A,0x59,0x54,0x43,0x4E,0x5,0x8,0x1F,0x12,0x31,0x3C,0x2B,0x26,0xBD,0xB0,0xA7,0xAA,0x89,0x84,0x93,0x9E,0xD5,0xD8,0xCF,0xC2,0xE1,0xEC,0xFB,0xF6,0xD6,0xDB,0xCC,0xC1,0xE2,0xEF,0xF8,0xF5,0xBE,0xB3,0xA4,0xA9,0x8A,0x87,0x90,0x9D,0x6,0xB,0x1C,0x11,0x32,0x3F,0x28,0x25,0x6E,0x63,0x74,0x79,0x5A,0x57,0x40,0x4D,0xDA,0xD7,0xC0,0xCD,0xEE,0xE3,0xF4,0xF9,0xB2,0xBF,0xA8,0xA5,0x86,0x8B,0x9C,0x91,0xA,0x7,0x10,0x1D,0x3E,0x33,0x24,0x29,0x62,0x6F,0x78,0x75,0x56,0x5B,0x4C,0x41,0x61,0x6C,0x7B,0x76,0x55,0x58,0x4F,0x42,0x9,0x4,0x13,0x1E,0x3D,0x30,0x27,0x2A,0xB1,0xBC,0xAB,0xA6,0x85,0x88,0x9F,0x92,0xD9,0xD4,0xC3,0xCE,0xED,0xE0,0xF7,0xFA,0xB7,0xBA,0xAD,0xA0,0x83,0x8E,0x99,0x94,0xDF,0xD2,0xC5,0xC8,0xEB,0xE6,0xF1,0xFC,0x67,0x6A,0x7D,0x70,0x53,0x5E,0x49,0x44,0xF,0x2,0x15,0x18,0x3B,0x36,0x21,0x2C,0xC,0x1,0x16,0x1B,0x38,0x35,0x22,0x2F,0x64,0x69,0x7E,0x73,0x50,0x5D,0x4A,0x47,0xDC,0xD1,0xC6,0xCB,0xE8,0xE5,0xF2,0xFF,0xB4,0xB9,0xAE,0xA3,0x80,0x8D,0x9A,0x97};
unsigned char boxMultiBy0x0e[256]={0x0,0xE,0x1C,0x12,0x38,0x36,0x24,0x2A,0x70,0x7E,0x6C,0x62,0x48,0x46,0x54,0x5A,0xE0,0xEE,0xFC,0xF2,0xD8,0xD6,0xC4,0xCA,0x90,0x9E,0x8C,0x82,0xA8,0xA6,0xB4,0xBA,0xDB,0xD5,0xC7,0xC9,0xE3,0xED,0xFF,0xF1,0xAB,0xA5,0xB7,0xB9,0x93,0x9D,0x8F,0x81,0x3B,0x35,0x27,0x29,0x3,0xD,0x1F,0x11,0x4B,0x45,0x57,0x59,0x73,0x7D,0x6F,0x61,0xAD,0xA3,0xB1,0xBF,0x95,0x9B,0x89,0x87,0xDD,0xD3,0xC1,0xCF,0xE5,0xEB,0xF9,0xF7,0x4D,0x43,0x51,0x5F,0x75,0x7B,0x69,0x67,0x3D,0x33,0x21,0x2F,0x5,0xB,0x19,0x17,0x76,0x78,0x6A,0x64,0x4E,0x40,0x52,0x5C,0x6,0x8,0x1A,0x14,0x3E,0x30,0x22,0x2C,0x96,0x98,0x8A,0x84,0xAE,0xA0,0xB2,0xBC,0xE6,0xE8,0xFA,0xF4,0xDE,0xD0,0xC2,0xCC,0x41,0x4F,0x5D,0x53,0x79,0x77,0x65,0x6B,0x31,0x3F,0x2D,0x23,0x9,0x7,0x15,0x1B,0xA1,0xAF,0xBD,0xB3,0x99,0x97,0x85,0x8B,0xD1,0xDF,0xCD,0xC3,0xE9,0xE7,0xF5,0xFB,0x9A,0x94,0x86,0x88,0xA2,0xAC,0xBE,0xB0,0xEA,0xE4,0xF6,0xF8,0xD2,0xDC,0xCE,0xC0,0x7A,0x74,0x66,0x68,0x42,0x4C,0x5E,0x50,0xA,0x4,0x16,0x18,0x32,0x3C,0x2E,0x20,0xEC,0xE2,0xF0,0xFE,0xD4,0xDA,0xC8,0xC6,0x9C,0x92,0x80,0x8E,0xA4,0xAA,0xB8,0xB6,0xC,0x2,0x10,0x1E,0x34,0x3A,0x28,0x26,0x7C,0x72,0x60,0x6E,0x44,0x4A,0x58,0x56,0x37,0x39,0x2B,0x25,0xF,0x1,0x13,0x1D,0x47,0x49,0x5B,0x55,0x7F,0x71,0x63,0x6D,0xD7,0xD9,0xCB,0xC5,0xEF,0xE1,0xF3,0xFD,0xA7,0xA9,0xBB,0xB5,0x9F,0x91,0x83,0x8D};

void keyExpansionWithInverseMixColumn(unsigned char expandedKey[44][4],unsigned char expandedkeyWithInverseMixColumn[44][4])
{

	memcpy(expandedkeyWithInverseMixColumn,expandedKey,4*4);
	for(int i=40;i<44;i++)
	{
		for(int j=0;j<4;j++)
		{
			expandedkeyWithInverseMixColumn[i][j]=expandedKey[i][j];
		}
	}
	unsigned char temp1,temp2,temp3,temp4;
	for(int i=4;i<40;i++)
	{
		//multiTwoNumbers(expandedKey[i][0],&temp1,0x0e);
		temp1=boxMultiBy0x0e[expandedKey[i][0]];

		//multiTwoNumbers(expandedKey[i][1],&temp2,0x0b);
		temp2=boxMultiBy0x0b[expandedKey[i][1]];
		//multiTwoNumbers(expandedKey[i][2],&temp3,0x0d);
		temp3=boxMultiBy0x0d[expandedKey[i][2]];
		//multiTwoNumbers(expandedKey[i][3],&temp4,0x09);
		temp4=boxMultiBy0x09[expandedKey[i][3]];
		expandedkeyWithInverseMixColumn[i][0]=temp1^temp2^temp3^temp4;


		//multiTwoNumbers(expandedKey[i][0],&temp1,0x09);
		temp1=boxMultiBy0x09[expandedKey[i][0]];
		//multiTwoNumbers(expandedKey[i][1],&temp2,0x0e);
		temp2=boxMultiBy0x0e[expandedKey[i][1]];
		//multiTwoNumbers(expandedKey[i][2],&temp3,0x0b);
		temp3=boxMultiBy0x0b[expandedKey[i][2]];
		//multiTwoNumbers(expandedKey[i][3],&temp4,0x0d);
		temp4=boxMultiBy0x0d[expandedKey[i][3]];
		expandedkeyWithInverseMixColumn[i][1]=temp1^temp2^temp3^temp4;

		//multiTwoNumbers(expandedKey[i][0],&temp1,0x0d);
		temp1=boxMultiBy0x0d[expandedKey[i][0]];
		//multiTwoNumbers(expandedKey[i][1],&temp2,0x09);
		temp2=boxMultiBy0x09[expandedKey[i][1]];
		//multiTwoNumbers(expandedKey[i][2],&temp3,0x0e);
		temp3=boxMultiBy0x0e[expandedKey[i][2]];
		//multiTwoNumbers(expandedKey[i][3],&temp4,0x0b);
		temp4=boxMultiBy0x0b[expandedKey[i][3]];
		expandedkeyWithInverseMixColumn[i][2]=temp1^temp2^temp3^temp4;

		//multiTwoNumbers(expandedKey[i][0],&temp1,0x0b);
		temp1=boxMultiBy0x0b[expandedKey[i][0]];
		//multiTwoNumbers(expandedKey[i][1],&temp2,0x0d);
		temp2=boxMultiBy0x0d[expandedKey[i][1]];
		//multiTwoNumbers(expandedKey[i][2],&temp3,0x09);
		temp3=boxMultiBy0x09[expandedKey[i][2]];
		//multiTwoNumbers(expandedKey[i][3],&temp4,0x0e);
		temp4=boxMultiBy0x0e[expandedKey[i][3]];
		expandedkeyWithInverseMixColumn[i][3]=temp1^temp2^temp3^temp4;
	}
}
void shiftRow(unsigned char in[4][4]) {
	unsigned char temp;

	temp = in[1][0];
	in[1][0] = in[1][1];
	in[1][1] = in[1][2];
	in[1][2] = in[1][3];
	in[1][3] = temp;

	temp = in[2][0];
	in[2][0] = in[2][2];
	in[2][2] = temp;
	temp = in[2][1];
	in[2][1] = in[2][3];
	in[2][3] = temp;

	temp = in[3][3];
	in[3][3] = in[3][2];
	in[3][2] = in[3][1];
	in[3][1] = in[3][0];
	in[3][0] = temp;
}
void invShiftRow(unsigned char in[4][4]) {
	unsigned char temp;
	temp = in[1][3];
	in[1][3] = in[1][2];
	in[1][2] = in[1][1];
	in[1][1] = in[1][0];
	in[1][0] = temp;

	temp = in[2][0];
	in[2][0] = in[2][2];
	in[2][2] = temp;
	temp = in[2][1];
	in[2][1] = in[2][3];
	in[2][3] = temp;

	temp = in[3][0];
	in[3][0] = in[3][1];
	in[3][1] = in[3][2];
	in[3][2] = in[3][3];
	in[3][3] = temp;
}
void addRoundKey(unsigned char roundData[4][4], unsigned char roundKey[][4],int index) {
	roundData[0][0] = roundData[0][0] ^ roundKey[index][0];
	roundData[0][1] = roundData[0][1] ^ roundKey[index+1][0];
	roundData[0][2] = roundData[0][2] ^ roundKey[index+2][0];
	roundData[0][3] = roundData[0][3] ^ roundKey[index+3][0];

	roundData[1][0] = roundData[1][0] ^ roundKey[index][1];
	roundData[1][1] = roundData[1][1] ^ roundKey[index+1][1];
	roundData[1][2] = roundData[1][2] ^ roundKey[index+2][1];
	roundData[1][3] = roundData[1][3] ^ roundKey[index+3][1];

	roundData[2][0] = roundData[2][0] ^ roundKey[index][2];
	roundData[2][1] = roundData[2][1] ^ roundKey[index+1][2];
	roundData[2][2] = roundData[2][2] ^ roundKey[index+2][2];
	roundData[2][3] = roundData[2][3] ^ roundKey[index+3][2];

	roundData[3][0] = roundData[3][0] ^ roundKey[index][3];
	roundData[3][1] = roundData[3][1] ^ roundKey[index+1][3];
	roundData[3][2] = roundData[3][2] ^ roundKey[index+2][3];
	roundData[3][3] = roundData[3][3] ^ roundKey[index+3][3];
}
void subAndMix(unsigned char input[][4],unsigned char L1[256][4],unsigned char L2[256][4],unsigned char L3[256][4],unsigned char L4[256][4])
{
	unsigned char output[4][4];
	int i=0;
	/*
#pragma omp parallel for default (none) private(i) shared(output) num_threads(2)
	for(i=0;i<4;i++)
	{
		output[0][i]=L1[(input[0][i])][0]^L2[(input[1][i])][0]^L3[(input[2][i])][0]^L4[(input[3][i])][0];
		output[1][i]=L1[(input[0][i])][1]^L2[(input[1][i])][1]^L3[(input[2][i])][1]^L4[(input[3][i])][1];
		output[2][i]=L1[(input[0][i])][2]^L2[(input[1][i])][2]^L3[(input[2][i])][2]^L4[(input[3][i])][2];
		output[3][i]=L1[(input[0][i])][3]^L2[(input[1][i])][3]^L3[(input[2][i])][3]^L4[(input[3][i])][3];
	}
	*/
	output[0][0]=L1[(input[0][0])][0]^L2[(input[1][0])][0]^L3[(input[2][0])][0]^L4[(input[3][0])][0];
	output[1][0]=L1[(input[0][0])][1]^L2[(input[1][0])][1]^L3[(input[2][0])][1]^L4[(input[3][0])][1];
	output[2][0]=L1[(input[0][0])][2]^L2[(input[1][0])][2]^L3[(input[2][0])][2]^L4[(input[3][0])][2];
	output[3][0]=L1[(input[0][0])][3]^L2[(input[1][0])][3]^L3[(input[2][0])][3]^L4[(input[3][0])][3];

	output[0][1]=L1[(input[0][1])][0]^L2[(input[1][1])][0]^L3[(input[2][1])][0]^L4[(input[3][1])][0];
	output[1][1]=L1[(input[0][1])][1]^L2[(input[1][1])][1]^L3[(input[2][1])][1]^L4[(input[3][1])][1];
	output[2][1]=L1[(input[0][1])][2]^L2[(input[1][1])][2]^L3[(input[2][1])][2]^L4[(input[3][1])][2];
	output[3][1]=L1[(input[0][1])][3]^L2[(input[1][1])][3]^L3[(input[2][1])][3]^L4[(input[3][1])][3];

	output[0][2]=L1[(input[0][2])][0]^L2[(input[1][2])][0]^L3[(input[2][2])][0]^L4[(input[3][2])][0];
	output[1][2]=L1[(input[0][2])][1]^L2[(input[1][2])][1]^L3[(input[2][2])][1]^L4[(input[3][2])][1];
	output[2][2]=L1[(input[0][2])][2]^L2[(input[1][2])][2]^L3[(input[2][2])][2]^L4[(input[3][2])][2];
	output[3][2]=L1[(input[0][2])][3]^L2[(input[1][2])][3]^L3[(input[2][2])][3]^L4[(input[3][2])][3];

	output[0][3]=L1[(input[0][3])][0]^L2[(input[1][3])][0]^L3[(input[2][3])][0]^L4[(input[3][3])][0];
	output[1][3]=L1[(input[0][3])][1]^L2[(input[1][3])][1]^L3[(input[2][3])][1]^L4[(input[3][3])][1];
	output[2][3]=L1[(input[0][3])][2]^L2[(input[1][3])][2]^L3[(input[2][3])][2]^L4[(input[3][3])][2];
	output[3][3]=L1[(input[0][3])][3]^L2[(input[1][3])][3]^L3[(input[2][3])][3]^L4[(input[3][3])][3];

	memcpy(input,output,4*4);
}
void substituteOnly(unsigned char input[][4])
{
	for(int i=0;i<4;i++)
	{
		for(int j=0;j<4;j++)
		{
			input[i][j]=SBoxMultiBy1[input[i][j]];
		}
	}
}
void substituteInverseOnly(unsigned char input[][4])
{
	for(int i=0;i<4;i++)
	{
		for(int j=0;j<4;j++)
		{
			input[i][j]=inverseOfSBox[input[i][j]];
		}
	}
}

bool LoadKey(const char* keyFilePath, unsigned char** ppKey, unsigned long* pKeyLength)
{
	FILE* pKeyFile = fopen(keyFilePath, "r");
	if(pKeyFile==0)return 0;

	fseek(pKeyFile, 0, SEEK_END);
	int fileLength = ftell(pKeyFile);
	fseek(pKeyFile, 0, SEEK_SET);

	char* pKeyText = new char[fileLength+1];
	fgets(pKeyText, fileLength + 1, pKeyFile);
	fclose(pKeyFile);

	*ppKey = new unsigned char[fileLength]; //extra allocation
	*pKeyLength = 0;

	char separators[] = " .;\/-,\'\"";
	char* pToken = strtok( pKeyText, separators);

	while( pToken != 0 )
	{
		sscanf(pToken, "%02x", &(*ppKey)[(*pKeyLength)++]);
		pToken = strtok(NULL, separators);
	}

	return true;
}
void roundEncryption(unsigned char plainText[][4],unsigned char expandedKey[][4],int index)
{
	shiftRow(plainText);
	subAndMix(plainText,LookUpOne,LookUpTwo,LookUpThree,LookUpFour);
	addRoundKey(plainText,expandedKey,index);
}
void roundDecryption(unsigned char plainText[][4],unsigned char expandedKey[][4],int index)
{
	invShiftRow(plainText);
	subAndMix(plainText,lookOneInverse,lookTwoInverse,lookThreeInverse,lookFourInverse);
	addRoundKey(plainText,expandedKey,index);
}

void multiBymatrix(unsigned char plaintext[4][4])
{
	unsigned char temp1;
	unsigned char temp2;
	unsigned char temp3;
	unsigned char temp4;
	unsigned char result[4][4];
	for(int i=0;i<4;i++)
	{
		multiTwoNumbers(plaintext[0][i],&temp1,0x02);
		multiTwoNumbers(plaintext[1][i],&temp2,0x03);
		multiTwoNumbers(plaintext[2][i],&temp3,0x01);
		multiTwoNumbers(plaintext[3][i],&temp4,0x01);
		result[0][i]=temp1^temp2^temp3^temp4;
	}
	for(int i=0;i<4;i++)
	{
		multiTwoNumbers(plaintext[0][i],&temp1,0x01);
		multiTwoNumbers(plaintext[1][i],&temp2,0x02);
		multiTwoNumbers(plaintext[2][i],&temp3,0x03);
		multiTwoNumbers(plaintext[3][i],&temp4,0x01);
		result[1][i]=temp1^temp2^temp3^temp4;
	}
	for(int i=0;i<4;i++)
	{
		multiTwoNumbers(plaintext[0][i],&temp1,0x01);
		multiTwoNumbers(plaintext[1][i],&temp2,0x01);
		multiTwoNumbers(plaintext[2][i],&temp3,0x02);
		multiTwoNumbers(plaintext[3][i],&temp4,0x03);
		result[2][i]=temp1^temp2^temp3^temp4;
	}
	for(int i=0;i<4;i++)
	{
		multiTwoNumbers(plaintext[0][i],&temp1,0x03);
		multiTwoNumbers(plaintext[1][i],&temp2,0x01);
		multiTwoNumbers(plaintext[2][i],&temp3,0x01);
		multiTwoNumbers(plaintext[3][i],&temp4,0x02);
		result[3][i]=temp1^temp2^temp3^temp4;
	}
	memcpy(plaintext,result,4*4);
}


int main(int argc, char* argv[])
{
	long startTime = clock();

	if((argc-1)!=4){printf("\nInvalid Program Arguments.\n");exit(0);}
	char Argv[4][20];



	//preCalculationsInEncryption();
	unsigned char* pKey = 0;
	unsigned long keyLength = 0;
	if(!LoadKey((const char*)argv[3], &pKey, &keyLength)){printf("\nError Loading key Text File.\n");exit(0);}
	unsigned char keys[44][4];
	unsigned char keysWithInverseMixColumn[44][4];
	keyExpansion(pKey,keys);
	keyExpansionWithInverseMixColumn(keys,keysWithInverseMixColumn);



	if(strcasecmp((const char*)argv[1], "encrypt")==0)
	{
		FILE* plainTextFile = fopen((const char*)argv[2], "r");
		if(plainTextFile==0){printf("\nError Loading PlainText File.\n");exit(0);}
		FILE* cipherTextFile = fopen((const char*)argv[4], "wb");
		if(cipherTextFile==0){printf("\nError Creating CipherText File.\n");exit(0);}
		fseek(plainTextFile, 0, SEEK_END);
		int fileLength = ftell(plainTextFile);
		fseek(plainTextFile, 0, SEEK_SET);
		int reminderBlockSize;
		if(fileLength%16==0)
		{
			reminderBlockSize=0;
		}
		else
		{
			 reminderBlockSize=fileLength-(fileLength/16)*16;
		}
		int numberOfBlocks=(fileLength)/16;

		unsigned char plaintext[4][4];
		unsigned char *input=NULL;
		input=(unsigned char*)malloc(sizeof(unsigned char)*((numberOfBlocks*16)+17));
		unsigned char *cipherText=NULL;
		cipherText=(unsigned char*)malloc(sizeof(unsigned char)*((numberOfBlocks*16)+17));
		fread(input, 1, sizeof(unsigned char)*((numberOfBlocks*16)+17), plainTextFile);
		int round=0;
		unsigned char*input1=input;
		unsigned char*cipherText1=cipherText;
#pragma omp parallel for default (none) private(round) private(input1) private(plaintext) private(cipherText1)shared(numberOfBlocks) shared(input) shared(keys) shared(cipherText)num_threads(8)
		for(round=0;round<numberOfBlocks;round++)
		{
			input1=input+16*round;
			changeFromOneDimToTwoDim(input1,plaintext);
			addRoundKey(plaintext,keys,0);
			int index=4;
			for(int i=0;i<9;i++)
			{
				roundEncryption(plaintext,keys,index);
				index+=4;
			}
			substituteOnly(plaintext);
			shiftRow(plaintext);
			addRoundKey(plaintext,keys,index);
			cipherText1=cipherText+16*round;
			changeFromTwoDimToOneDim(cipherText1,plaintext);

		}
		input=input+numberOfBlocks*16;
		cipherText=cipherText+numberOfBlocks*16;
		if(reminderBlockSize==0)
		{
			input[0]=0x10;input[1]=0x10;input[2]=0x10;input[3]=0x10;input[4]=0x10;input[5]=0x10;input[6]=0x10;input[7]=0x10;input[8]=0x10;input[9]=0x10;input[10]=0x10;input[11]=0x10;input[12]=0x10;input[13]=0x10;input[14]=0x10;input[15]=0x10;
		}
		else
		{
			unsigned char addedChar=16-reminderBlockSize;
			for(int i=reminderBlockSize;i<16;i++)
				input[i]=addedChar;
		}
		changeFromOneDimToTwoDim(input,plaintext);
		addRoundKey(plaintext,keys,0);
		int index=4;
		for(int i=0;i<9;i++)
		{
			roundEncryption(plaintext,keys,index);
			index+=4;
		}
		substituteOnly(plaintext);
		shiftRow(plaintext);
		addRoundKey(plaintext,keys,index);
		changeFromTwoDimToOneDim(cipherText,plaintext);
		cipherText=cipherText-(16*numberOfBlocks);
		input=input-(16*numberOfBlocks);
		fwrite(cipherText, 1, sizeof(unsigned char)*((numberOfBlocks*16)+17), cipherTextFile);
		fclose(plainTextFile);
		fclose(cipherTextFile);

		free (input);
		free (cipherText);
		long finishTime = clock();
		printf("\nEncryption completed successfully in %d ms\n", finishTime/1000 - startTime/1000);

	}


	//decryption
	else if(strcasecmp((const char*)argv[1], "decrypt")==0)
	{
		FILE* plainTextFileDecryption = fopen((const char*)argv[4], "w");
		FILE* cipherTextFile = fopen((const char*)argv[2], "rb");
		if(cipherTextFile==0){printf("\nError Loading CipherText File.\n");exit(0);}
		if(plainTextFileDecryption==0){printf("\nError Creating PlainText File.\n");exit(0);}
		fseek(cipherTextFile, 0, SEEK_END);
		int fileLength = ftell(cipherTextFile);
		fseek(cipherTextFile, 0, SEEK_SET);
		int numberOfBlocks=fileLength/16;

		unsigned char *input=NULL;
		input=(unsigned char*)malloc(sizeof(unsigned char)*((numberOfBlocks*16)+17));
		unsigned char *plainTextDecryption=NULL;
		plainTextDecryption=(unsigned char*)malloc(sizeof(unsigned char)*((numberOfBlocks*16)+17));
		fread(input, 1, sizeof(unsigned char)*((numberOfBlocks*16)), cipherTextFile);





		unsigned char CipherText[4][4];
		unsigned char*input1=input;
		unsigned char*plainTextDecryption1=plainTextDecryption;
		int round=0;
#pragma omp parallel for default (none) private(round) private(input1) private(CipherText) private(plainTextDecryption1)shared(numberOfBlocks) shared(input) shared(keysWithInverseMixColumn) shared(plainTextDecryption)num_threads(8)
		for(round=0;round<numberOfBlocks-1;round++)
		{
			input1=input+16*round;
			changeFromOneDimToTwoDim(input1,CipherText);
			addRoundKey(CipherText,keysWithInverseMixColumn,40);
			int index=36;
			for(int i=0;i<9;i++)
			{
				roundDecryption(CipherText,keysWithInverseMixColumn,index);
				index-=4;
			}
			substituteInverseOnly(CipherText);
			invShiftRow(CipherText);
			addRoundKey(CipherText,keysWithInverseMixColumn,index);
			plainTextDecryption1=plainTextDecryption+round*16;
			changeFromTwoDimToOneDim(plainTextDecryption1,CipherText);
		}
		input=input+(numberOfBlocks-1)*16;
		plainTextDecryption=plainTextDecryption+(numberOfBlocks-1)*16;
		//final block
		changeFromOneDimToTwoDim(input,CipherText);
		addRoundKey(CipherText,keysWithInverseMixColumn,40);
		int index=36;
		for(int i=0;i<9;i++)
		{
			roundDecryption(CipherText,keysWithInverseMixColumn,index);
			index-=4;
		}
		substituteInverseOnly(CipherText);
		invShiftRow(CipherText);
		addRoundKey(CipherText,keysWithInverseMixColumn,index);
		changeFromTwoDimToOneDim(plainTextDecryption,CipherText);
		unsigned char added=plainTextDecryption[15];
		plainTextDecryption[16-added-1]='\0';
		input=input-16*(numberOfBlocks-1);
		plainTextDecryption=plainTextDecryption-16*(numberOfBlocks-1);

		fwrite(plainTextDecryption, 1,sizeof(unsigned char)*(((numberOfBlocks-1)*16)+16-added-1) , plainTextFileDecryption);
		fclose(plainTextFileDecryption);
		fclose(cipherTextFile);
		free(plainTextDecryption);
		free(input);
		long finishTime = clock();
		printf("\nDecryption completed successfully in %d ms\n", finishTime/1000 - startTime/1000);
	}

}
